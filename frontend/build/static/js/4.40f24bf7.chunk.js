(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[4],{194:function(e,t,s){"use strict";s.r(t);var c=s(5),r=s(0),o=function(e){var t=e.titleMain,s=e.titleSub,r=e.author,o=e.date;return Object(c.jsxs)("div",{className:"about-header",children:[Object(c.jsx)("div",{className:"section-title",children:Object(c.jsxs)("h1",{className:"heading blog-heading",children:[t," ",Object(c.jsx)("br",{}),s]})}),Object(c.jsx)("div",{className:"hr"}),Object(c.jsxs)("div",{className:"about-sub blog-title-sub",children:["By: ",r]}),Object(c.jsxs)("div",{className:"about-sub blog-title-sub blog-date",children:["Created: ",o]})]})},a=function(e){var t=e.title,s=e.children;return Object(c.jsxs)("div",{className:"blog-section",children:[Object(c.jsx)("div",{className:"blog-head-wrap",children:Object(c.jsx)("h1",{className:"blog-header",children:t})}),s]})},n=function(){return Object(c.jsxs)(a,{title:"Arrays",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Basic Array Docs"}),Object(c.jsx)("a",{href:"https://developer.apple.com/documentation/swift/array",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Detailed Array Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Arrays are a good way of making a list and checking it twice. Arrays in Swift are similar to ArrayLists in Java. In both Java and Swift, we can't mix Datatypes in an Array. Here's how to make one with Swift and ",Object(c.jsx)("strong",{className:"blog-bold",children:"check the type "}),"that the"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Array "}),"holds:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["// hmmm I wonder where I ordered from \ud83e\udd14",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," todaysOrder: [String] = [",Object(c.jsx)("br",{}),'"C2. Hot Soy Garlic Chicken", \xa0 \xa0',Object(c.jsx)("br",{}),'"C9. Creamy Garlic Chicken Bite", \xa0 \xa0',Object(c.jsx)("br",{}),'"C9. Creamy Garlic Chicken Bite"',Object(c.jsx)("br",{}),"]",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"type(of: todaysOrder) // Check the type of any variable"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['Now you may be wondering, "where did he order from?" or "why is he so obsessed with food?" or "how do I make an empty array that I can fill in later?". These are all valid questions, but I can only answer one of those for now. Let\'s use my stomach as an example for the third question:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," inMyStomach: [String] = []",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," inMyStomach2 = [String]()"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Hopefully, in a few minutes, I can eat some of my order and put it inside of my stomach. In Java ArrayList, we need to call the add() method. In Swift, there is a much simpler way of"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"appending to an Array"}),". \xa0Since I can't do this in real life yet, let's do it in Swift:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," firstIndex = todaysOrder[0]",Object(c.jsx)("br",{}),'inMyStomach += ["C3. Krabby Patty"]']})})]})},l=function(){return Object(c.jsxs)(a,{title:"Basic Data Types",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID317",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Basic Data Types Docs"}),Object(c.jsx)("a",{href:"https://developer.apple.com/documentation/swift",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Detailed Data Types Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Sometimes we want to declare a variable and add data later. If we tried the with the previous method, Swift's stomach will growl again:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsx)("div",{className:"code",children:Object(c.jsx)("span",{className:"code-error",children:"var anyType"})})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Swift's stomach is growling because it doesn't know that there's nothing muffling the digestion sounds. To prevent this, we need to get a snack for Swift to muffle the rumbles and ensure people don't mistake it for something else. We would do this with"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Type Annotation"}),":",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," anyType:"," ",Object(c.jsxs)("strong",{className:"code-keyword",children:["Any",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\u200d"]}),'anyType = "Mamba out"',Object(c.jsx)("br",{}),"anyType = 8 + 24"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Swift has several data types. For now, we will look at the basic ones. The basics would be ",Object(c.jsx)("strong",{className:"blog-bold",children:"Any"}),","," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Double"}),","," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Bool"}),","," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Int"}),", and"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"String"}),":",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," price: Double = 64.39",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," isHungry: Bool ="," ",Object(c.jsxs)("strong",{className:"code-keyword",children:["true",Object(c.jsx)("br",{}),"let"]})," ","first: Int = 2_020",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' second: String = "\ud83e\udd73"']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["We can use underscores to make numbers more readable. Another great thing about Swift is that you can integrate emojis into your code \ud83d\ude32!"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Underscores"})," are also used to"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Skip Unneeded Information"})," (It also does something else, but it will be covered later).",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['But now you might be wondering why "first" and "second" contain two things that should never be in the same sentence with each other. Well, that\'s because I didn\'t get to finish my String. Let\'s fix that with'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"String interpolation"})," ",'"\\()":',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' stringInterpolation: String = "\\(first) is over! \\(second)"',Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "2020 is over! \ud83e\udd73" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["See! Now it all makes sense! Look at how much easier it is to do that in Swift! But don't mind me, I'm just trying to make myself feel better about spending so much on a MacBook \ud83d\ude05. There is another way we could have fixed that sentence, but we'll do this with the mood variable we initialized before. In case you forgot what \"mood\" contained, I'll ",Object(c.jsx)("strong",{className:"blog-bold",children:"Print "}),"out the sentence for you:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' addString = "I\'m " + mood + " \ud83d\ude22"',Object(c.jsx)("br",{}),"print(addString) // println in Java",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "I\'m still hungry \ud83d\ude22\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["A triple-double is when a player records double-digit scores in three categories. In Swift, triple-double quotes are used to create a \xa0",Object(c.jsx)("strong",{className:"blog-bold",children:"Multi-line String"}),". We can do this the Java way or the Python way:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' javaWay: String = "This is a multi\\n" + "line\\n" + "string"',Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' pythonWay: String = """',Object(c.jsx)("br",{}),"This is a multi",Object(c.jsx)("br",{}),"line ",Object(c.jsx)("br",{}),"string",Object(c.jsx)("br",{}),'"""']})})]})},i=function(){return Object(c.jsxs)(a,{title:"Classes | Structs",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Classes and Structs Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["You may have noticed that I haven't shown you how to create a class yet. In Swift, we have Classes and Structures. If you were to copy a Class, both the original and the copy would reference the same object. If you copy a Struct object, they reference two unique Struct objects.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Think of a Class as your reflection and a Struct as having an identical twin. If you change your clothes, your reflection will have the same changes. If you had a twin and changed your clothes, your twin wouldn't change too. I mean, you and your twin could match clothes, but then you guys are just intentionally trying to confuse people \ud83d\ude05.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["A Struct and a Class have only a few differences in structure and methods. We will start by looking at a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Structure"})," or"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Struct:"}),Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"struct"})," FoodStruct ","{",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0// properties",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"static"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," isEdible: Bool ="," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"})," // static property",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," name: String // public property",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"private"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," rating: Int // private property",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"lazy"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," isCooked: Bool ="," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"})," // lazy - intialized when called",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0// computed property",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," ratingPercent: String ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ",'"\\(',Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),'.rating * 10)% rating"',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0// property observers - run code before or after changes",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0// didSet = run after change",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0// willSet = run before change",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," cookPercent: Int ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"willSet"}),"{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0 \xa0print("\\(name) is currently: \\(cookPercent)% cooked")',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0","}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"didSet"}),"{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0 \xa0print("\\(name) changed to: \\(cookPercent)% cooked")',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0// constructor",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"init"}),"(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," name: String,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," rating: Int = 0,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," cookPercent: Int = 0)"," ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".name = name",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".rating = rating",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".cookPercent = cookPercent",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),Object(c.jsx)("br",{})," \xa0 \xa0// getter method",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," getRating() -> Int? ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".rating",Object(c.jsx)("br",{})," \xa0 \xa0","}"," \xa0",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0// setter method",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"mutating"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," setRating(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," rating: Int) ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".rating = rating",Object(c.jsx)("br",{})," \xa0 \xa0","}"," \xa0 \xa0",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0// static method",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"static"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," printEnumType() ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("I am a Food")',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The ",Object(c.jsx)("strong",{className:"blog-bold",children:"static"}),","," ",Object(c.jsx)("strong",{className:"blog-bold",children:"public "}),"and"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"private "}),'keywords serve the same purpose as in Java. The "isCooked" property is a'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Lazy Variable"}),'. A lazy variable is a just-in-time calculation variable, meaning that a lazy variable is born when needed to avoid unnecessary work. The "ratingPercent" variable is a'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Computed Property"}),'. A computed property executes code and saves the result into that variable \ud83e\udd2f. "cookPercent" is a'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Property Observer"}),". A property observer is similar to Santa Claus. It sees your property when it's sleeping. It knows when it's awake. If the property changes, Santa will run code before or after changes are made to a property (check the comments in the code for clarity).",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The following functions are available in Java, but with a different syntax. In a Struct, to create a method that can change properties, the keyword ",Object(c.jsx)("strong",{className:"blog-bold",children:"mutating "}),"must be used. To allow for a Struct to be mutated, it must be a variable. If a Struct is a constant, it can't be mutated (even through mutating functions):",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' food = FoodStruct("Spaghetti",10)',Object(c.jsx)("br",{}),"print(food.ratingPercent)",Object(c.jsx)("br",{}),"food.cookPercent = 77",Object(c.jsx)("br",{}),'print("1 minute later...")',Object(c.jsx)("br",{}),"food.cookPercent = 100",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"/*",Object(c.jsx)("br",{}),'"100% rating"',Object(c.jsx)("br",{}),'"Spaghetti is currently: 0% cooked"',Object(c.jsx)("br",{}),'"Spaghetti changed to: 77% cooked"',Object(c.jsx)("br",{}),'"1 minute later..."',Object(c.jsx)("br",{}),'"Spaghetti is currently: 77% cooked"',Object(c.jsx)("br",{}),'"Spaghetti changed to: 100% cooked\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Now let's look at a ",Object(c.jsx)("strong",{className:"blog-bold",children:"Class"}),":",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"class"})," Food ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"static"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," isEdible: Bool ="," ",Object(c.jsxs)("strong",{className:"code-keyword",children:["true",Object(c.jsx)("br",{}),"\u200d"]})," ","\xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," name: String",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"private"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," rating: Int",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"lazy"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," isCooked: Bool ="," ",Object(c.jsxs)("strong",{className:"code-keyword",children:["true",Object(c.jsx)("br",{}),"\u200d"]})," ",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," ratingPercent: String ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0"\\(',Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),'.rating * 10)% rating"',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," ","cookPercent: Int ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"willSet "}),"{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0 \xa0print("\\(name) is currently: \\(cookPercent)% cooked")',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0","}"," \xa0 \xa0 \xa0",Object(c.jsx)("br",{})," \xa0",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"didSet "}),"{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0 \xa0print("\\(name) changed to: \\(cookPercent)% cooked")',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"init"}),"(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," name: String,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," rating: Int = 0,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," cookPercent: Int = 0)"," ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".name = name",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".rating = rating",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".cookPercent = cookPercent",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 ",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," ","getRating() -> Int? ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".rating",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 ",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," ","overrideMe() ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("Override me")',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 ",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"static"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," printEnumType() ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("I am a Food")',Object(c.jsx)("br",{})," \xa0 \xa0","}"," \xa0",Object(c.jsx)("br",{})," \xa0",Object(c.jsx)("br",{})," \xa0 \xa0// setter method don't need mutating method anymore",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," setRating(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," rating: Int) ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".rating = rating",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("br",{})," \xa0 \xa0// clean up the class when deallocated",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"deinit"})," ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("Mr. Stark, I don\'t feel so good")',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Almost everything is the same! There are only two differences within the Class (these are the methods with comments). The mutating keyword is not used (if only we could say the same about covid \ud83d\ude2b). In Structs and Classes, we have an init function to initialize our object. In Classes only, we also can have a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Deinitialization Function"}),'. Deinitialization functions run when Class objects are deallocated from memory. You could even have your Class print "Mr. Stark, I don\'t feel so good" if you wanted.',Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["If you wanted to make a Class that could not be inherited, you would prepend ",Object(c.jsx)("strong",{className:"blog-bold",children:"final "}),"to it. Similar to Java, parent Classes allow their children to inherit and override their methods. Like how a child can override the genetics they inherited from their parent. The parents could be 5'7\" and somehow the child becomes 6'9\" \ud83e\udd7a. I should have drank more milk as a kid. Anyway, a subclass can ",Object(c.jsx)("strong",{className:"blog-bold",children:"inherit "}),"from a superclass, ",Object(c.jsx)("strong",{className:"blog-bold",children:"override "}),"and call the superclass methods like so:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["// no claases can inherit from this class",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"final"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"class"})," KoreanFriedChicken: Food ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"private"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," desc: String",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"init"}),"(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," name: String,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," rating: Int,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," cookPercent: Int = 0,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"}),' desc: String = "Delicious") ',"{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".desc = desc",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"super"}),".init(name, rating, cookPercent)",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("br",{})," \xa0 \xa0// override a method in superclass",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"override"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," overrideMe() ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("Overriden")',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["With Classes, we can instantiate them as constants and mutate their properties. Although, we can only deallocate a Class object if it is a variable: ",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"blog-bold",children:"Posture Check: "}),"If you're slouching, stop that \ud83d\ude02.",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," kfc = KoreanFriedChicken(",Object(c.jsx)("br",{}),'"Creamy Garlic Bite", ',Object(c.jsx)("br",{}),"10, ",Object(c.jsx)("br",{}),"100, ",Object(c.jsx)("br",{}),'"Bad for a first date")',Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," kfc2: KoreanFriedChicken? = KoreanFriedChicken(",Object(c.jsx)("br",{}),'"Creamy Garlic Bite", ',Object(c.jsx)("br",{}),"10, ",Object(c.jsx)("br",{}),"100, ",Object(c.jsx)("br",{}),'"Bad for a first date")',Object(c.jsx)("br",{}),"kfc2 = ",Object(c.jsx)("strong",{className:"code-keyword",children:"nil"})," // \ud83d\ude08\ud83d\udc4c\ud83d\udca5 deallocated",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'/* "Mr. Stark, I don\'t feel so good\\n" */']})})]})},b=function(){return Object(c.jsxs)(a,{title:"Closures",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/Closures.html",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Closures Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["A closure is an act of closing something. A"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Closure "}),"in Swift is a variable that holds code. In part 2 of my Swift blog, I will cover these more in-depth, but for now, let's learn the basics. In Java, the lambda expression would be the closest thing to a Closure. On its own, a Closure looks like this:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," closureWithReturn ="," ","{",Object(c.jsx)("br",{})," \xa0 \xa0(num: Int) -> Int"," ",Object(c.jsxs)("strong",{children:["in",Object(c.jsx)("br",{}),"\u200d"]})," ","\xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," 34 + 35 + num",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"print(closureWithReturn(8))",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'/* "77\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["You might be wondering why you would ever create a closure when you could make a function. The answer is that you wouldn't create a lonely closure. Closures are often inputs or outputs of functions. Often, they are the last input parameter for functions:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," quickMath(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," num1: Int,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," num2: Int,"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," closure: (Int,Int)->Int) ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," res = closure(num1, num2)",Object(c.jsx)("br",{}),' \xa0 \xa0print("\\(num1) + \\(num2) = \\(res)")',Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["You have two methods of passing it into a function. You can follow the second method only if the closure is at the end of the input parameters (",Object(c.jsx)("strong",{className:"blog-bold",children:"Trailing Closure"}),"):",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["// writing something similar to a lonely closure",Object(c.jsx)("br",{}),"quickMath(400, 3, ","{",Object(c.jsx)("br",{})," \xa0 \xa0(num1: Int, num2: Int) -> Int"," ",Object(c.jsxs)("strong",{children:["in",Object(c.jsx)("br",{}),"\u200d"]})," ",'\xa0 \xa0print("This closure does addition")',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," num1 + num2",Object(c.jsx)("br",{}),"}",")",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"// preferred",Object(c.jsx)("br",{}),"quickMath(580, 7)","{",Object(c.jsx)("br",{}),' \xa0 \xa0print("This closure does addition")',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," $0 + $1",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'/* "This closure does addition"',Object(c.jsx)("br",{}),'"400 + 3 = 403\\n" */',Object(c.jsx)("br",{}),'/* "This closure does addition"',Object(c.jsx)("br",{}),'"580 + 7 = 587\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Not only can you input a closure, but you can also return one:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["// func that returns a closure",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," iWant(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," str: String) -> (String) -> Void ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"let"}),' start = "I want \\(str)"',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print(start + " and \\($0)!")',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 // (func inputs)(closure inputs)",Object(c.jsx)("br",{}),'iWant("Steak")("Wine")',Object(c.jsx)("br",{}),'iWant("Chicken")("Mekju")',Object(c.jsx)("br",{}),'iWant("to eat delicious food")("lose weight")',Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"/*",Object(c.jsx)("br",{}),'"I want Steak and Wine"',Object(c.jsx)("br",{}),'"I want Chicken and Mekju"',Object(c.jsx)("br",{}),'"I want to eat delicious food and lost weight\\n"*/']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["It does take a while to get used to it. Here's how I tricked myself into understanding it. Look at the FedEx logo:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-img"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Look in between the capital E and x. You can see an arrow. Now that you've seen the arrow, it can never be unseen. Now, imagine everything in between the first arrow and the open brace as what's returned. So if you ever see more than one arrow, you'll think of FedEx and the vast amount of times that I've typed the word arrow in this paragraph. Fun fact, when an Air Nomad receives their blue arrow tattoos when they master air bending (I recommend watching Avatar: the Last \ud83d\udca8 if you haven't already).",Object(c.jsx)("br",{})]})]})},j=function(){return Object(c.jsxs)(a,{title:"Conditionals",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID127",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Conditionals Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:[Object(c.jsx)("strong",{className:"blog-bold",children:"Conditionals"}),", if I'm so hungry, why not just get a snack? Well, the answer to that is simple. My order comes in 10 minutes, and it'll taste so much better if I wait. Anyway, we can use the"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Logical Operators AND "}),'"&&" and ',Object(c.jsx)("strong",{className:"blog-bold",children:"OR "}),'"||" in the same way we use it in Java. Here is an example of an ugly ',Object(c.jsx)("strong",{className:"blog-bold",children:"if-else statement"}),":",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"if"}),' mood == "still hungry" || me.feeling == "hangry" ',"{",Object(c.jsx)("br",{}),' \xa0 \xa0print("Check phone for delivery time \ud83d\ude22")',Object(c.jsx)("br",{}),"}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"else"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"if"}),' mood == "full" && !isHungry ',"{"," \xa0 \xa0",Object(c.jsx)("br",{}),' \xa0 \xa0print("""',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0Take a nap!",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0You have food coma\ud83e\udd71",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0"The drowsy sleepy feeling you get after eating a large meal" """)',Object(c.jsx)("br",{}),"}",Object(c.jsx)("strong",{className:"code-keyword",children:"else "}),"{"," \xa0 \xa0",Object(c.jsx)("br",{}),' \xa0 \xa0print("You are always hungry \ud83c\udf57")',Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "Check phone for delivery time \ud83d\ude22\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Now let's make a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Ternary Operator "}),'(if mood is not "still hungry", return "Check phone for delivery time \ud83d\ude22" else, return "sleeeepyyy \ud83d\ude34". Check the location of the question mark and colon!):',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:['print(mood != "still hungry" ?',Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0"Check phone for delivery time \ud83d\ude22" : "sleeeepyyy \ud83d\ude34")',Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "sleeeepyyy \ud83d\ude34\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Here is a Switch case:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-img",style:{backgroundImage:'url("https://images-na.ssl-images-amazon.com/images/I/81%2BcJVR3%2B0L._AC_SL1500_.jpg")'}}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["That's the wrong Switch case \ud83e\udd26. Another conditional that we can use is a ",Object(c.jsx)("strong",{className:"blog-bold",children:"Switch-case"}),". If we're trying to match a possible value of a variable, this would be our best option:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"switch"})," mood ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," ",'"hungry":',Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("as always")',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," ",'"sleeeepyyy \ud83d\ude34":',Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0mood = "Wooooo the food is here now!!!"',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0print(mood)",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"default"}),":",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("I love food \ud83d\ude02")',Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "Wooooo the food is here now!!!\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Switch-cases can also use ranges if the values are numeric."," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Range operators "}),'are created by typing an ellipsis "..." or "..<" between numbers:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," happinessLevel: Int = 10",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"switch"})," happinessLevel ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," 1 ... 3:",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("1 - 3")',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," 4 ..< 7:",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("4 - 6")',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," 7 ..< 9:",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("7 - 8")',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," 10:",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("Time to eat \ud83d\ude01")',Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"default"}),":",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("Wooooo the hunger related code is over!!")',Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "Time to eat \ud83d\ude01\\n" */']})})]})},d=function(){return Object(c.jsxs)(a,{title:"Dictionaries | Tuples",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID113",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Basic Dictionary Docs"}),Object(c.jsx)("a",{href:"https://developer.apple.com/documentation/swift/dictionary",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Detailed Dictionary Docs"}),Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID448",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Tuples Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Everything that I've introduced so far has been basic programming concepts that can also be found in Java, sprinkled with bad jokes and transitions. The following sections will cover more complex programming concepts, but there is no need to worry! The bad jokes are here to stay \ud83d\ude08.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In Swift and many other programming languages, we have a complex data type similar to a dictionary. In Java, this would be called a HashMap. In Swift, its called a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Dictionary\xa0"}),"(key-value pair collection):",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," wiki: [String: String] = [",Object(c.jsx)("br",{}),' \xa0 \xa0"food coma": "Postprandial somnolence or food coma is a normal state of drowsiness or lassitude following a meal",',Object(c.jsx)("br",{}),' \xa0 \xa0"hangry": "bad-tempered or irritable as a result of hunger"',Object(c.jsx)("br",{}),"]",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"// empty dictionaries",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," myStomach: [String: String] = [:]",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," myStomach2 = [String: String]()"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Now to get an item from the menu, you would call that menu item in brackets. But, if you tried to order something that's not in the Dictionary, you would get ",Object(c.jsx)("strong",{className:"blog-bold",children:"nil "}),"(nil == null). We could prevent this by providing a default value:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:['ogamOrder["food coma"]',Object(c.jsx)("br",{}),'ogamOrder["Bangers and mash"] // nil',Object(c.jsx)("br",{}),'ogamOrder["Bangers and mash", default: "Some type of food"]']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['You may be wondering, "why didn\'t he just delete his bad jokes?" or "what if I wanted to store different data types in my Dictionary?". Unfortunately, we can\'t do either. But we have a solution to the second question! We can create a'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Tuple "}),"and get a value:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' me = (firstName: "Michael",',Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0lastName: "Doctor",',Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0feeling: "feelings",',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0 \xa0sleepyLevel: 10)",Object(c.jsx)("br",{}),"me.feeling"]})})]})},h=function(){return Object(c.jsx)(a,{title:"The End",children:Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Congratulations! You survived the onslaught of horrible jokes, weird analogies, random references, and the Swift programming language! Hopefully, I didn't bore you or make you cringe too many times \ud83d\ude05. Wait for Part 2 for the actual implementation of the Swift language. I hope you're ready for the next barrage of useful and random facts, next time on ",Object(c.jsx)("span",{className:"blog-strike",children:"\ud83d\udc09\ud83c\udfc0Z"})," My Swift Blog!",Object(c.jsx)("br",{})]})})},m=function(){return Object(c.jsxs)(a,{title:"Enumerations | Error Handling",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Enums Docs"}),Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID515",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Error Handling Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The e num is called Euler's number and has a value of 2.718...",Object(c.jsx)("strong",{className:"blog-bold",children:" Enumerations\xa0"}),"or"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Enums "}),"in Swift have nothing to do with that natural number. They allow us to define data types or group related data: ",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"enum"})," BadJokeType ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," tolerable",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," tooMuch(amt: Int)",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," painful",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Think of the cases in an enum as static properties of a Java class. Enums are useful when a variable can only be a few specific values. An enum case can also take parameters. Let's write a function that takes our new type as input:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," badJokeIndicator(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," val: BadJokeType) -> String? ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," res: String?",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"switch"})," val ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," .tooMuch( ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," amt ) ",Object(c.jsx)("strong",{className:"code-keyword",children:"where"})," amt == 3000:",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0 \xa0res = "I love you \\(amt)"',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," ",".tolerable, .tooMuch:",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0 \xa0 \xa0res ="," ",Object(c.jsxs)("strong",{className:"code-keyword",children:["nil",Object(c.jsx)("br",{}),"\u200d"]})," ","\xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," .painful:",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0 \xa0 \xa0res = "I think you\'re tired... Go to sleep"',Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," res",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"// You can write these as one line or spaced out",Object(c.jsx)("br",{}),"print(",Object(c.jsx)("br",{})," \xa0 \xa0badJokeIndicator(",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0BadJokeType",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0 \xa0 \xa0.tooMuch(amt: 3000)",Object(c.jsx)("br",{}),' \xa0 \xa0) ?? "I am Iron Man \ud83d\ude22"',Object(c.jsx)("br",{}),")",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"print(",Object(c.jsx)("br",{})," \xa0 \xa0badJokeIndicator(",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0BadJokeType",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0 \xa0 \xa0.painful",Object(c.jsx)("br",{}),' \xa0 \xa0) ?? "Not too bad yet!"',Object(c.jsx)("br",{}),")",Object(c.jsx)("br",{}),'/* "I love you 3000\\n" */',Object(c.jsx)("br",{}),'/* "I think you\'re tired... Go to sleep\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["It is common to use a switch-case with enums. The switch-case must be"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Exhaustive"}),' (cover all enum cases). A switch-case for enumerations must include all Fourteen million, six hundred, and five possible outcomes \ud83d\ude08\ud83d\udc4c\ud83d\udca5 (don\'t make an enum with that many \ud83d\ude05). That is why you can see "tooMuch" in two cases.',Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Enums can be used to quote the Avengers using a switch-case or could be used to create an error:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"enum"})," JokeNotFound: Error"," ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"case"})," joke404",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['Now, you may be wondering, "did he cry watching Avengers?" or "is it possible to'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"throw an error "}),'in Swift?". The answer is yes. You can also use the'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"throws "}),"keyword and create the Swift version of a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"try-catch block"}),":",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," ThrowsJoke()"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"throws"})," -> Void","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"throw"})," ","JokeNotFound.joke404",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:"do "}),"{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"try"})," ThrowsJoke()",Object(c.jsx)("br",{}),' \xa0 \xa0print("Woo didn\'t force a joke")',Object(c.jsx)("br",{}),"}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"catch "}),"{",Object(c.jsx)("br",{}),' \xa0 \xa0print("Do not TRY to THROW a pun! We will CATCH it...\ud83e\udd26")',Object(c.jsx)("br",{}),"}"]})})]})},O=function(){return Object(c.jsxs)(a,{title:"Extensions",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/Extensions.html",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Extensions Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Extensions make a woman's hair longer and voluminous. Swift Extensions do the same thing! Swift"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Extensions "}),"allow us to add or modify data types and Protocols:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"extension"})," Int ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," divBy1() -> Int ","{",Object(c.jsx)("br",{}),' \xa0 \xa0 \xa0 \xa0print("Such a useful function \ud83d\ude02")',Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"})," / 1",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"mutating"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," incr() ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"self"})," += 1",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," extendMe: Int = 8",Object(c.jsx)("br",{}),"print(extendMe.divBy1())",Object(c.jsx)("br",{}),"extendMe.incr()",Object(c.jsx)("br",{}),"print(extendMe)",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"/*",Object(c.jsx)("br",{}),'"Such a useful function \ud83d\ude02"',Object(c.jsx)("br",{}),'"8"',Object(c.jsx)("br",{}),'"9\\n" */']})})]})},x=function(){return Object(c.jsxs)(a,{title:"Functions",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Function Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Congratulations! You survived the onslaught of horrible jokes from the previous section. Now that I've finished eating and my brain is"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"FUNCTION"}),"ing ... \ud83e\udd26:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"}),' innerThoughts(str: String = "disappointing transitions") ',"{",Object(c.jsx)("br",{}),' \xa0 \xa0print("I\'m so \\(str) ")',Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," ",'innerThoughts2(str: String = "full" ) -> Void ',"{",Object(c.jsx)("br",{}),' \xa0 \xa0print("I\'m so \\(str) ")',Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'innerThoughts(str: "full")',Object(c.jsx)("br",{}),"innerThoughts2()",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "I\'m so full\\n" */',Object(c.jsx)("br",{}),'/* "I\'m so full\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['Can you spot the differences between the two? They both do the same thing! The arrow "-> Void" is the same as saying that the function will not return anything. It\'s like how you will not return if I make another bad transition. The other difference is that the second call did not pass any arguments but still printed the same thing. That is because we set a default value for the "str" parameter.',Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['As you can see, we needed to put "str: " if we passed an argument into our function. There is a way to avoid this. We would do this by setting an'," ",Object(c.jsx)("strong",{className:"blog-bold",children:"external and internal name "}),"for our parameters. The internal name is like the name that people call me before suffering through my transitions. The external name (underscore) is what they'll call me after (nothing, and I don't blame them \ud83d\ude02):",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," sleepyLevels(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," lvl: Int) -> String"," ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ",'"Sleepiness out of 10 = \\(lvl)"',Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"print(sleepyLevels(10))",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "Sleepiness out of 10 = 10\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["If you wanted to have a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Variadic function "}),'(a function that can take a variable number of arguments), place an ellipsis "..." after the datatype:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," myMoodsToday(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," moods: String...) ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"for"})," mood"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"in"})," moods ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0print(mood)",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),'myMoodsToday("sleepy", "Hungry", "still hungry", "happy", "disappointed", "sleepy")',Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "',Object(c.jsx)("br",{}),"sleepy",Object(c.jsx)("br",{}),"Hungry",Object(c.jsx)("br",{}),"still hungry",Object(c.jsx)("br",{}),"happy",Object(c.jsx)("br",{}),"disappointed",Object(c.jsx)("br",{}),'sleepy\\n" */']})})]})},g=function(){return Object(c.jsxs)(a,{title:"Introduction",children:[Object(c.jsx)("div",{className:"about-desc blog-content",children:"Are you a developer with Java experience? Then this blog post is for you!"}),Object(c.jsx)("div",{className:"about-desc blog-content",children:"Both Java and Swift are general-purpose, compiled programming languages. So if you understand Java, Swift will make sense to you (hopefully)! The programming language Swift is used for macOS, iOS, watchOS, tvOS, and more. This blog will focus on the Swift language for now."}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Basic programming knowledge is required to understand this blog. If you are a beginner, I would recommend"," ",Object(c.jsx)("a",{href:"https://www.hackingwithswift.com/100",target:"_blank",rel:"noopener noreferrer",className:"blog-text-link",children:"Paul Hudson's 100 Days of Swift"}),". Regardless of if you have coding experience with Java or another language, I can guarantee that at least you won't fall asleep reading this blog. Instead, you might get hungry or cringe \ud83d\ude05. Sorry, I'm writing this while waiting for my food, so a lot of my example code will be food-related."]})]})},u=function(){return Object(c.jsxs)(a,{title:"Loops",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Loops Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Loops! Froot loops, belt loops, loop de loops. There are many types of loops and many ways to create loops in Swift. Let's start with the"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"for-loop "}),"that we are used to:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"for"})," i"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"in"})," 0 ..< todaysOrder.count ","{",Object(c.jsx)("br",{})," \xa0 \xa0print(todaysOrder[i])",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"/* ",Object(c.jsx)("br",{}),'"C2. Hot Soy Garlic Chicken"\xa0 \xa0',Object(c.jsx)("br",{}),'"C9. Creamy Garlic Chicken Bite"',Object(c.jsx)("br",{}),'"C9. Creamy Garlic Chicken Bite"',Object(c.jsx)("br",{}),'"C3. Krabby Patty\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The syntax looks different from Java but makes sense when compared to a Java for-loop. What if we only need the values inside of the Array?:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"for"})," order"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"in"})," todaysOrder ","{",Object(c.jsx)("br",{})," \xa0 \xa0print(order)",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"/* ",Object(c.jsx)("br",{}),'"C2. Hot Soy Garlic Chicken"\xa0 \xa0',Object(c.jsx)("br",{}),'"C9. Creamy Garlic Chicken Bite"',Object(c.jsx)("br",{}),'"C9. Creamy Garlic Chicken Bite"',Object(c.jsx)("br",{}),'"C3. Krabby Patty\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:[Object(c.jsx)("strong",{className:"blog-bold",children:"While "}),"reading this blog, you may have noticed that Swift differs in the use of brackets most of the time. The while loop is no exception to that (I'm not going to lie. I can't try to be funny WHILE I'm eating...\ud83e\udd26):",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," num = 0",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"while"})," num < 2 ","{",Object(c.jsx)("br",{})," \xa0 \xa0print(num)",Object(c.jsx)("br",{})," \xa0 \xa0num += 1",Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "0\\n1\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["As with Java, ",Object(c.jsx)("strong",{className:"blog-bold",children:"continue "}),"(skips that iteration) and ",Object(c.jsx)("strong",{className:"blog-bold",children:"break "}),"(break out of the loop) keywords are sometimes needed. But for real, I should not DO this blog WHILE eating...\ud83e\udd26 (Yes, it is the same as a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"do-while loop "}),"in Java):",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"repeat "}),"{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"if"})," num == 2 ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0num -= 1",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsxs)("strong",{className:"code-keyword",children:["continue",Object(c.jsx)("br",{}),"\u200d"]})," ","\xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 \xa0print(num)",Object(c.jsx)("br",{})," \xa0 \xa0num -= 1",Object(c.jsx)("br",{}),"}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"while"})," num >= 0",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "1\\n0\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['In Swift, "break" can be used on the outermost loop of a nested loop!:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["getMeOutThesePunsHurt: ",Object(c.jsx)("strong",{className:"code-keyword",children:"for"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"in"})," 0 ..< 2 ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"for"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"in"})," 0 ..< 2 ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"break"})," ","getMeOutThesePunsHurt",Object(c.jsx)("br",{})," \xa0 \xa0","}",Object(c.jsx)("br",{}),"}"]})})]})},w=function(){return Object(c.jsxs)(a,{title:"Operators",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Operators Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Operator, a movie starring Martin Starr and Mae Whitman. ",Object(c.jsx)("strong",{className:"blog-bold",children:"Operators"})," perform mathematical, relational or logical operation. The basic"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"math operators"})," would be the same things we learned as kids. The only difference is that we need to care about the type of data. Meaning, that we need to"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"convert "}),"some values in Swift:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," yearDouble: Double = 2020.2",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"// var year = yearDouble + 1 will give you an error",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," year: Int = Int(yearDouble) + 1"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["We all know how to do addition, subtraction, multiplication, and division (most of the time \ud83d\ude05). Here's the lazy way of"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"modifying and reassigning "}),"a variable:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["year += 1",Object(c.jsx)("br",{}),"year -= 1",Object(c.jsx)("br",{}),"year *= 1",Object(c.jsx)("br",{}),"year /= 1",Object(c.jsx)("br",{}),"year %= 2"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:[Object(c.jsx)("strong",{className:"blog-bold",children:"Comparison Operators "}),'are pretty straight forward and often used with conditionals. The only difference is that in Swift, we can check if Strings are equal using comparison operators (\ud83e\udd2f No more .equals("string")):',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," hungerBefore: Int = 8",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," hungerNow: Int = 9",Object(c.jsx)("br",{}),'print("My hunger level now is greater than my hunger level 10 minutes before? \\(hungerNow > hungerBefore)")',Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' compare: Bool = "still hungry" == mood',Object(c.jsx)("br",{}),'compare = "not hungry" != mood',Object(c.jsx)("br",{}),"compare = hungerNow >= hungerBefore",Object(c.jsx)("br",{}),"compare = hungerNow < hungerBefore",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"isHungry = ",Object(c.jsx)("strong",{className:"code-keyword",children:"false"}),Object(c.jsx)("br",{}),"compare = !isHungry",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," ",'thatsMySecretCap: String = "I\'m always angr... hungry"']})})]})},y=function(){return Object(c.jsxs)(a,{title:"Optionals",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Optionals Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Either I have a decent joke or no joke at all. If I don't know if I have a joke, I shouldn't force it (this makes more sense later). Not knowing if there will be a joke is similar to an Optional. An"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Optional "}),"can either have a value or be nil. An optional is created by having a data type and a trailing question mark:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," badJokeCounter(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," num: Int) -> String?"," ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"if"})," num >= 10"," ","{",Object(c.jsx)("br",{})," \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ",Object(c.jsxs)("strong",{className:"code-keyword",children:["nil",Object(c.jsx)("br",{}),"\u200d"]})," ","\xa0 \xa0","}",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ",'"Number of bad jokes = \\(num)"',Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["If you know that there is no way that the joke is nil, you can"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Force Unwrap "}),"the Optional by appending an exclamation mark to it:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["print(badJokeCounter(9)!)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "Number of bad jokes = 9\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["But as you saw from the previous sections, it's dangerous to assume that my jokes will be decent. In other words, it is best not to force it. I'm talking about Optionals and not my jokes (Fine! I was talking about both \ud83d\ude13). There are two safe ways of unwrapping your Optionals. These are the if-let statement and nil coalescing.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The ",Object(c.jsx)("strong",{className:"blog-bold",children:"if-let Statement "}),"attempts to unwrap the Optional by implementing the if-else conditional. If the unwrapped returns nothing (unwrapped == nil), the else block is executed:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"if"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," unwrapped = badJokeCounter(10) ","{",Object(c.jsx)("br",{})," \xa0 \xa0print(unwrapped) // if it is a string",Object(c.jsx)("br",{}),"}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"else"})," ","{",Object(c.jsx)("br",{}),' \xa0 \xa0print("\ud83d\ude34\ud83d\udca4") // if its nil',Object(c.jsx)("br",{}),"}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "\ud83d\ude34\ud83d\udca4\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The ",Object(c.jsx)("strong",{className:"blog-bold",children:"Nil Coalescing\xa0"}),"attempts to unwrap the Optional by assigning it to a variable, returning a default value. Similar to when I make a weird joke, two question marks are typed. It is created by placing two question marks followed by a default value:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"let"}),' jokeLvl = badJokeCounter(10) ?? "\ud83d\ude34\ud83d\udca4"',Object(c.jsx)("br",{}),"print(jokeLvl)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),'/* "\ud83d\ude34\ud83d\udca4\\n" */']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["If you don't mind joke == nil, then you can try optional chaining."," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Optional Chaining "}),"allows you to access the Optional's properties and methods if it is not nil. If it is nil, the function calls after the question mark will not be attempted:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," badJoke = badJokeCounter(9)?",Object(c.jsx)("br",{})," \xa0 \xa0.uppercased()",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," badJoke2 = badJokeCounter(10)?",Object(c.jsx)("br",{})," \xa0 \xa0.uppercased()"]})})]})},f=function(){return Object(c.jsxs)(a,{title:"Protocols",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Protocols Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["A Swift ",Object(c.jsx)("strong",{className:"blog-bold",children:"Protocol "}),"is a set of required properties and methods that a Struct, Enum, or Class must implement. Think of a Protocol as a blueprint similar to the Krabby Patty secret formula. A Protocol in Java would be an interface:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"protocol"})," KrabbyPattyFormula"," ","{",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," ingredients: [String] ","{"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"get"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"set"})," ","}",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," cookingTime: Int ","{"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"get"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"set"})," ","}",Object(c.jsx)("br",{})," \xa0 \xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," ","ayeAyeCaptain()",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The ",Object(c.jsx)("strong",{className:"blog-bold",children:"get"})," and"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"set"})," in between the braces indicate that the property can be acquired and mutated.",Object(c.jsx)("br",{})]})]})},N=function(){return Object(c.jsxs)(a,{title:"Setup",children:[Object(c.jsx)("div",{className:"about-desc blog-content",children:"This blog will only be of use if you have a Mac computer with macOS 10.15 or higher. So join me on the dark side and get trapped in the Apple ecosystem! \ud83d\ude08"}),Object(c.jsx)("div",{className:"blog-img",style:{backgroundImage:'url("https://images.unsplash.com/photo-1537498425277-c283d32ef9db?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1957&q=80")'}}),Object(c.jsx)("div",{className:"about-desc blog-content",children:"If you don't want to spend your money on a Mac computer, you can always try running a VMware or VirtualBox for macOS. You can also try the Swift programming language here:"}),Object(c.jsx)("a",{href:"https://www.tutorialspoint.com/compile_swift_online.php",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Swift Online Program"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["So with that out of the way, let's install the Xcode IDE:",Object(c.jsx)("br",{})]}),Object(c.jsxs)("ol",{className:"blog-list",children:[Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Go to the App Store"})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Install Xcode"})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Wash your hands"})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Grab a snack because that install will take a while"})})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["As a child, I played"," ",Object(c.jsx)("a",{href:"http://www.push2play.ca/games/grounders/",target:"_blank",rel:"noopener noreferrer",className:"blog-text-link",children:"Grounders"})," ",'with my friends on a playground. The first thing we will do is create a "Playground" file to play with ourselves and Swift:',Object(c.jsx)("br",{})]}),Object(c.jsxs)("ol",{className:"blog-list",children:[Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Open up Xcode"})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Go to the menu bar up top"})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Press "File"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Press "New"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Press "Playground"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Choose the "Blank" Template'})})]}),Object(c.jsx)("div",{className:"blog-img",style:{backgroundImage:'url("https://uploads-ssl.webflow.com/5f9a24556170f63ee516953f/6026005604cd51a8e5d83e75_1.png")'}})]})},p=function(){return Object(c.jsxs)(a,{title:"Comments | Variables | Constants",children:[Object(c.jsx)("a",{href:"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID310",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Constants and Variables Docs"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["We will begin with something simple first. Let's create",Object(c.jsx)("strong",{className:"blog-bold",children:" Comments"}),'! Similar to Youtube, you can create a comment at the bottom of this blog \ud83d\ude05. But, in Swift we can create single line comments with "command" + "/". We can also create documentation comments by typing "command" + "option" + "/". : ',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["// Single-line comment",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"/* Multi-line comment",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{children:"In the code below, multi-line comments will be used to emulate a print statement."}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("strong",{children:"Understanding the code:"}),Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:" \xa0 \xa0(Swift keyword)"})," (normal code):",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:" \xa0 \xa0 \xa0 \xa0var"}),' watermelon = "colors"',Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:" \xa0 \xa0"}),Object(c.jsxs)("span",{className:"code-error",children:["Error Code: ",Object(c.jsx)("br",{})]})," ","\xa0 \xa0 \xa0 \xa0",Object(c.jsx)("span",{className:"code-error",children:"var 77watermelon"}),Object(c.jsx)("br",{}),"*/",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"/// Documentation comment",Object(c.jsx)("br",{}),"/// <#Description#>"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["You will notice that any differences between Swift and Java are usually the syntax. Now let's start coding. Let's start by storing data in a ",Object(c.jsx)("strong",{className:"blog-bold",children:"Variable "}),"without type annotation:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"var"}),' mood = "Hungry"',Object(c.jsx)("br",{}),'mood = "still hungry"']})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["If we tried this with Java, Java would growl at you like my stomach is growling at me. Now let's create a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Constant "}),"and try the same thing:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"let"}),' orderStatus = "Mark is on the way with your Order."',Object(c.jsx)("br",{}),Object(c.jsxs)("span",{className:"code-error",children:['orderStatus = "Heads up! Your courier is about to arrive."'," "]}),Object(c.jsx)("br",{}),Object(c.jsx)("span",{className:"code-error"})]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Uh oh, Swift is getting hangry because you can't change a constant's data no matter how much you want it to be true \ud83d\ude2d.",Object(c.jsx)("br",{})]})]})},k=function(){return Object(c.jsx)("div",{className:"vid-wrapper",children:Object(c.jsx)("div",{style:{paddingTop:"56.17021276595745%"},className:"blog-vid w-video w-embed",children:Object(c.jsx)("iframe",{className:"embedly-embed",src:"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FRB5nWzdl-b8%3Ffeature%3Doembed&display_name=YouTube&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DRB5nWzdl-b8&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FRB5nWzdl-b8%2Fhqdefault.jpg&key=c4e54deccf4d4ec997a64902e9a30300&type=text%2Fhtml&schema=youtube",scrolling:"no",title:"YouTube embed",frameBorder:"0",allow:"autoplay; fullscreen",allowFullScreen:!0})})})},v=function(){return Object(c.jsxs)("div",{className:"section-desc",children:[Object(c.jsx)(k,{}),Object(c.jsx)(g,{}),Object(c.jsx)(N,{}),Object(c.jsx)(p,{}),Object(c.jsx)(l,{}),Object(c.jsx)(w,{}),Object(c.jsx)(n,{}),Object(c.jsx)(j,{}),Object(c.jsx)(u,{}),Object(c.jsx)(x,{}),Object(c.jsx)(d,{}),Object(c.jsx)(y,{}),Object(c.jsx)(m,{}),Object(c.jsx)(i,{}),Object(c.jsx)(b,{}),Object(c.jsx)(f,{}),Object(c.jsx)(O,{}),Object(c.jsx)(h,{})]})},S=s(75),I=s(192),C=s(81),T=s(97),D=s(67),B=function(e){return e.split("\n").map((function(e){return Object(c.jsx)("p",{children:e})}))},M=function(e){var t=e.name,s=e.date,r=e.content;return Object(c.jsxs)("div",{className:"comment",children:[Object(c.jsx)("div",{className:"comment-name",children:t}),Object(c.jsx)("div",{className:"comment-date",children:s}),Object(c.jsx)("div",{className:"comment-content",children:B(r)})]})},A=s(100),_=s.n(A),P=s(96),L=s.n(P),J=s(121),F=s.n(J),E=s(122),W=function(e,t){var s=Object(r.useState)(null),c=Object(D.a)(s,2),o=c[0],a=c[1],n=Object(r.useState)(!0),l=Object(D.a)(n,2),i=l[0],b=l[1];return Object(r.useEffect)((function(){Object(E.a)(F.a.mark((function s(){var c,r;return F.a.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.prev=0,s.next=3,L.a.get(e);case 3:return c=s.sent,s.next=6,c.data;case 6:r=s.sent,t(r),s.next=13;break;case 10:s.prev=10,s.t0=s.catch(0),a(s.t0);case 13:return s.prev=13,b(!1),s.finish(13);case 16:case"end":return s.stop()}}),s,null,[[0,10,13,16]])})))()}),[e,t]),{loading:i,error:o}},G=s(16),H=s(190),Y=s.n(H),q=function(e){var t=e.blog,s=Object(r.useState)(),o=Object(D.a)(s,2),a=o[0],n=o[1],l=Object(r.useState)({}),i=Object(D.a)(l,2),b=i[0],j=i[1],d=Object(r.useRef)(),h=Object(r.useRef)(),m=Object(r.useState)(!0),O=Object(D.a)(m,2),x=O[0],g=O[1];Object(r.useEffect)((function(){j({csrfmiddlewaretoken:document.getElementsByName("csrfmiddlewaretoken")[0].value})}),[]),Object(r.useEffect)((function(){a&&g(!1)}),[a]);var u="https://michael-doctor.me";W("".concat(u,"/api/blog/comment/").concat(t,"/"),n);var w=function(e){var t=e.target,s=t.name,c=t.value;j(Object(T.a)(Object(T.a)({},b),{},Object(C.a)({},s,c)))},y=function(e){var t=e.csrfmiddlewaretoken,s=e.author,c=e.content,r=e.blog,o={headers:{"Content-Type":"application/json","X-CSRFTOKEN":t}},l=JSON.stringify({blog:r,author:s,content:c});L.a.post("".concat(u,"/api/blog/create/comment/"),l,o).then((function(e){h.current.value="";var t={};t=a?{length:a.length+1,comments:[e.data].concat(Object(I.a)(a.comments))}:{length:1,comments:[e.data]},n(t)})).catch((function(e){h.current.value="***** An Error Occured! Try again later \ud83d\ude2d*****",d.current.disabled=!0,h.current.disabled=!0}))};return Object(c.jsxs)("div",{className:"comment-section",children:[Object(c.jsx)("div",{className:"hr"}),Object(c.jsx)("div",{className:"comment-item comment-form-border"}),Object(c.jsx)("div",{className:"hr comment-hr"}),Object(c.jsxs)("div",{className:"comment-item comments",children:[Object(c.jsx)("div",{className:"num-com-wrap",children:Object(c.jsxs)("div",{className:"comment-name",children:[x?"Loading":a.length," Comment",x?"s":1===a.length?"":"s"]})}),Object(c.jsx)("div",{className:"comment-form-wrap",children:Object(c.jsx)("div",{className:"blog-form-block",children:Object(c.jsxs)("form",{className:"blog-form",onSubmit:function(e){e.preventDefault();var s=b.csrfmiddlewaretoken,c=b.author,r=b.content;c||(c=d.current.value),r||(r=h.current.value),j({csrfmiddlewaretoken:s,author:c,content:r}),y({csrfmiddlewaretoken:s,author:c,content:r,blog:t})},children:[Object(c.jsx)(_.a,{}),Object(c.jsx)("input",{type:"text",className:"blog-text-field w-input",maxLength:"256",name:"author",placeholder:"Name",id:"author",onChange:w,ref:d,required:!0}),Object(c.jsx)("textarea",{name:"content",maxLength:"5000",id:"content",placeholder:"Type your comments here!",className:"blog-text-field blog-text-area w-input",onChange:w,ref:h,required:!0}),Object(c.jsx)("input",{type:"submit",value:"Comment",className:"slider-btn hover1 proj-btn w-button"})]})})}),x?Object(c.jsx)(G.a,{}):a.comments.map((function(e){var t=e.id,s=e.author,r=e.content,o=e.date;return Object(c.jsx)(M,{name:s,date:Y()(o).format("MMMM DD, YYYY"),content:r},t)}))]})]})},R=function(e){var t=e.blog,s=e.children;return Object(c.jsxs)("div",{className:"content-container",children:[Object(c.jsx)("div",{className:"nav-gap"}),Object(c.jsx)("div",{className:"info-content",children:Object(c.jsx)("div",{className:"about-me-container",children:Object(c.jsx)("div",{className:"blog-wrap",children:s})})}),Object(c.jsx)(q,{blog:t}),Object(c.jsx)(S.a,{})]})},z=s(77),V=s(76);t.default=function(){return Object(V.a)("https://res.cloudinary.com/hsse18xji/raw/upload/v1606877900/portfolio/js/jquery_xpecxx.js"),Object(V.a)("https://res.cloudinary.com/hsse18xji/raw/upload/v1607053094/portfolio/js/webflow.animation_skydrw.js"),Object(c.jsxs)("div",{className:"container",children:[Object(c.jsx)(z.a,{}),Object(c.jsxs)(R,{blog:1,children:[Object(c.jsx)(o,{titleMain:"Swift Blog Part 1:",titleSub:"The Language",author:"Michael Doctor",date:"February 13, 2021"}),Object(c.jsx)(v,{})]})]})}},75:function(e,t,s){"use strict";var c=s(5);s(0);t.a=function(){return Object(c.jsxs)("div",{"data-w-id":"f50d5e09-e817-9552-6d28-c27f47cc01b0",className:"footer opacity-scroll",children:[Object(c.jsx)("div",{className:"hr"}),Object(c.jsxs)("div",{className:"footer-container",id:"footer",children:[Object(c.jsxs)("div",{className:"footer-info",children:[Object(c.jsx)("h5",{className:"footer-header",children:"Michael Doctor's Portfolio"}),Object(c.jsx)("div",{className:"footer-desc",children:"My personal website portfolio was made with React, Django, PostgreSQL, and Webflow."})]}),Object(c.jsxs)("div",{className:"footer-links",children:[Object(c.jsx)("h5",{className:"footer-header",children:"Links"}),Object(c.jsxs)("a",{href:"https://github.com/MichaelDoctor",className:"link",target:"_blank",rel:"noopener noreferrer",children:[Object(c.jsx)("i",{className:"fab fa-github"})," Github"]}),Object(c.jsxs)("a",{href:"https://www.linkedin.com/in/michael-doctor-403/",className:"link",target:"_blank",rel:"noopener noreferrer",children:[Object(c.jsx)("i",{className:"fab fa-linkedin"})," LinkedIn"]})]}),Object(c.jsxs)("div",{className:"footer-contact",children:[Object(c.jsx)("h5",{className:"footer-header",children:"Contact Info"}),Object(c.jsx)("h6",{className:"footer-name",children:"Michael Doctor"}),Object(c.jsxs)("div",{className:"text-block-2",children:["Canada",Object(c.jsx)("br",{}),"Calgary, AB"]}),Object(c.jsxs)("a",{href:"#intro",className:"link",children:[Object(c.jsx)("i",{className:"fab fa-google"})," michaeldoctoryyc"]})]})]})]})}},76:function(e,t,s){"use strict";var c=s(0);t.a=function(e){Object(c.useEffect)((function(){var t=document.createElement("script");return t.type="text/javascript",t.src=e,t.async=!0,document.body.appendChild(t),function(){document.body.removeChild(t)}}),[e])}},77:function(e,t,s){"use strict";var c=s(5),r=(s(0),function(e){var t=e.url,s=e.text;return Object(c.jsxs)("a",{href:t,className:"nav-link hover1",children:[s,Object(c.jsx)("br",{})]})}),o=s(11);t.a=function(){return Object(c.jsx)("div",{"data-collapse":"medium","data-animation":"default","data-duration":"400","data-w-id":"2b4fe990-422b-aafa-0844-15043c40d507",role:"banner",className:"navbar w-nav",children:Object(c.jsxs)("div",{className:"container w-container",children:[Object(c.jsx)(o.b,{to:"/",className:"brand hover1 w-nav-brand",children:Object(c.jsxs)("div",{className:"nav-logo",children:[Object(c.jsx)("i",{className:"fas fa-code"})," MICHAEL DOCTOR"]})}),Object(c.jsxs)("nav",{role:"navigation",className:"nav-links w-nav-menu",children:[Object(c.jsx)(r,{url:"/#intro",text:"Home"}),Object(c.jsx)(r,{url:"/#projects",text:"Projects"}),Object(c.jsx)(r,{url:"/#blogs",text:"Blogs"}),Object(c.jsx)(r,{url:"/#about",text:"About Me"}),Object(c.jsx)(r,{url:"/#intro",text:"Contact Me"})]}),Object(c.jsx)("div",{className:"menu-button hover1 w-nav-button",children:Object(c.jsx)("div",{className:"icon w-icon-nav-menu"})})]})})}}}]);
//# sourceMappingURL=4.40f24bf7.chunk.js.map