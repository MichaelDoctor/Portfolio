{"version":3,"sources":["components/Blog/BlogMainHeader.js","components/Blog/BlogSection.js","components/Blog/YoutubeWrap.js","components/BlogSections1/Arrays.js","components/BlogSections1/BasicDataTypes.js","components/BlogSections1/Classes.js","components/BlogSections1/Closures.js","components/BlogSections1/Conditionals.js","components/BlogSections1/Dictionaries.js","components/BlogSections1/End.js","components/BlogSections1/Enums.js","components/BlogSections1/Extensions.js","components/BlogSections1/Functions.js","components/BlogSections1/Introduction.js","components/BlogSections1/Loops.js","components/BlogSections1/Operators.js","components/BlogSections1/Optionals.js","components/BlogSections1/Protocols.js","components/BlogSections1/Setup.js","components/BlogSections1/Variables.js","components/BlogSections1/Sets.js","components/Blog/BlogSections.js","hooks/newLine.hook.js","components/Blog/BlogComment.js","hooks/useAxios.hook.js","components/Blog/BlogCommentSection.js","components/Blog/BlogWrap.js","pages/Blog1.page.js","components/Footer/Footer.js","hooks/useScript.hook.js","components/Navbar/NavTab.js","components/Navbar/Navbar.js"],"names":["BlogMainHeader","titleMain","titleSub","author","date","className","BlogSection","title","children","id","YoutubeWrap","link","style","paddingTop","src","scrolling","frameBorder","allow","allowFullScreen","Arrays","href","target","rel","BasicDataTypes","Classes","Closures","backgroundImage","Conditionals","Dictionaries","End","Enums","Extensions","Functions","Introduction","Loops","Operators","Optionals","Protocols","Setup","Variables","Sets","BlogSections","newLine","text","split","map","str","BlogComment","name","content","useAxios","url","setData","useState","error","setError","loading","setLoading","useEffect","a","axios","get","res","data","resJson","BlogCommentSection","blog","comments","setComments","inputs","setInputs","authorRef","useRef","commentRef","loadingComments","setLoadingComments","csrfmiddlewaretoken","document","getElementsByName","value","baseUrl","handleChange","e","createComment","config","headers","body","JSON","stringify","post","then","current","tempComments","length","catch","err","disabled","onSubmit","preventDefault","type","maxLength","placeholder","onChange","ref","required","PageLoader","moment","format","BlogWrap","Footer","Blog1","useScript","Navbar","data-w-id","script","createElement","async","appendChild","removeChild","NavTab","data-collapse","data-animation","data-duration","role","to"],"mappings":"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","file":"static/js/4.8d985eae.chunk.js","sourcesContent":["import React from 'react';\n\nconst BlogMainHeader = ({ titleMain, titleSub, author, date }) => {\n  return (\n    <div className=\"about-header\">\n      <div className=\"section-title\">\n        <h1 className=\"heading blog-heading\">\n          {titleMain} <br />\n          {titleSub}\n        </h1>\n      </div>\n      <div className=\"hr\"></div>\n      <div className=\"about-sub blog-title-sub\">By: {author}</div>\n      <div className=\"about-sub blog-title-sub blog-date\">Created: {date}</div>\n    </div>\n  );\n};\nexport default BlogMainHeader;\n","import React from 'react';\n\nconst BlogSection = ({ title, children }) => {\n  return (\n    <div className=\"blog-section\">\n      <div className=\"blog-head-wrap\">\n        <h1 className=\"blog-header\" id={title}>{title}</h1>\n      </div>\n      {children}\n    </div>\n  );\n};\nexport default BlogSection;\n","import React from 'react';\n\nconst YoutubeWrap = ({link}) => {\n  return (\n    <div className=\"vid-wrapper\">\n      <div\n        style={{ paddingTop: '56.17021276595745%' }}\n        className=\"blog-vid w-video w-embed\"\n      >\n        <iframe\n          className=\"embedly-embed\"\n          src={link}\n          scrolling=\"no\"\n          title=\"YouTube embed\"\n          frameBorder=\"0\"\n          allow=\"autoplay; fullscreen\"\n          allowFullScreen={true}\n        ></iframe>\n      </div>\n    </div>\n  );\n};\nexport default YoutubeWrap;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nconst Arrays = () => {\n  return (\n    <BlogSection title=\"Arrays\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Basic Array Docs\n      </a>\n      <a\n        href=\"https://developer.apple.com/documentation/swift/array\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Detailed Array Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Arrays are a good way of making a list and checking it twice. Arrays in\n        Swift are similar to ArrayLists in Java. In both Java and Swift, we\n        can&#x27;t mix Datatypes in an Array. Here&#x27;s how to make one with\n        Swift and <strong className=\"blog-bold\">check the type </strong>that the{' '}\n        <strong className=\"blog-bold\">Array </strong>holds:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          // hmmm I wonder where I ordered from 🤔\n          <br />‍<strong className=\"code-keyword\">var</strong> todaysOrder:\n          [String] = [<br />\n          &quot;C2. Hot Soy Garlic Chicken&quot;,    <br />\n          &quot;C9. Creamy Garlic Chicken Bite&quot;,    <br />\n          &quot;C9. Creamy Garlic Chicken Bite&quot;\n          <br />]<br />‍<br />\n          type(of: todaysOrder) // Check the type of any variable\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Now you may be wondering, &quot;where did he order from?&quot; or\n        &quot;why is he so obsessed with food?&quot; or &quot;how do I make an\n        empty array that I can fill in later?&quot;. These are all valid\n        questions, but I can only answer one of those for now. Let&#x27;s use my\n        stomach as an example for the third question:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> inMyStomach: [String] =\n          []\n          <br />‍<strong className=\"code-keyword\">var</strong> inMyStomach2 =\n          [String]()\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Hopefully, in a few minutes, I can eat some of my order and put it\n        inside of my stomach. In Java ArrayList, we need to call the add()\n        method. In Swift, there is a much simpler way of{' '}\n        <strong className=\"blog-bold\">appending to an Array</strong>.  Since I\n        can&#x27;t do this in real life yet, let&#x27;s do it in Swift:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> firstIndex =\n          todaysOrder[0]\n          <br />\n          inMyStomach += [&quot;C3. Krabby Patty&quot;]\n        </div>\n      </div>\n      <YoutubeWrap link=\"https://www.youtube.com/embed/6XywUI6nYsQ\"/>\n    </BlogSection>\n  );\n};\nexport default Arrays;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst BasicDataTypes = () => {\n  return (\n    <BlogSection title=\"Basic Data Types\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID317\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Basic Data Types Docs\n      </a>\n      <a\n        href=\"https://developer.apple.com/documentation/swift\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Detailed Data Types Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Sometimes we want to declare a variable and add data later. If we tried\n        that with the previous method, Swift&#x27;s stomach will growl again:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <span className=\"code-error\">var anyType</span>\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Swift&#x27;s stomach is growling because it doesn&#x27;t know that\n        there&#x27;s nothing muffling the digestion sounds. To prevent this, we\n        need to get a snack for Swift to muffle the rumbles and ensure people\n        don&#x27;t mistake it for something else. We would do this with{' '}\n        <strong className=\"blog-bold\">Type Annotation</strong>:<br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> anyType:{' '}\n          <strong className=\"code-keyword\">\n            Any\n            <br />‍<br />‍\n          </strong>\n          anyType = &quot;Mamba out&quot;\n          <br />\n          anyType = 8 + 24\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Swift has several data types. For now, we will look at the basic ones.\n        The basics would be <strong className=\"blog-bold\">Any</strong>,{' '}\n        <strong className=\"blog-bold\">Double</strong>,{' '}\n        <strong className=\"blog-bold\">Bool</strong>,{' '}\n        <strong className=\"blog-bold\">Int</strong>, and{' '}\n        <strong className=\"blog-bold\">String</strong>:<br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">let</strong> price: Double = 64.39\n          <br />‍<strong className=\"code-keyword\">var</strong> isHungry: Bool ={' '}\n          <strong className=\"code-keyword\">\n            true\n            <br />\n            let\n          </strong>{' '}\n          first: Int = 2_020\n          <br />‍<strong className=\"code-keyword\">var</strong> second: String =\n          &quot;🥳&quot;\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        We can use underscores to make numbers more readable. Another great\n        thing about Swift is that you can integrate emojis into your code 😲!{' '}\n        <strong className=\"blog-bold\">Underscores</strong> are also used to{' '}\n        <strong className=\"blog-bold\">Skip Unneeded Information</strong> (It\n        also does something else, but it will be covered later).\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        You might be wondering why &quot;first&quot; and\n        &quot;second&quot; contain two things that should never be in the same\n        sentence with each other. Well, that&#x27;s because I didn&#x27;t get to\n        finish my String. Let&#x27;s fix that with{' '}\n        <strong className=\"blog-bold\">String interpolation</strong>{' '}\n        &quot;\\()&quot;:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> stringInterpolation:\n          String = &quot;\\(first) is over! \\(second)&quot;\n          <br />‍<br />\n          /* &quot;2020 is over! 🥳&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        See! Now it all makes sense! Look at how much easier it is to do that in\n        Swift! But don&#x27;t mind me, I&#x27;m just trying to make myself feel\n        better about spending so much on a MacBook 😅. There is another way we\n        could have fixed that sentence, but we&#x27;ll do this with the mood\n        variable we initialized before. In case you forgot what &quot;mood&quot;\n        contained, I&#x27;ll <strong className=\"blog-bold\">Print </strong>out\n        the sentence for you:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> addString =\n          &quot;I&#x27;m &quot; + mood + &quot; 😢&quot;\n          <br />\n          print(addString) // println in Java\n          <br />‍<br />\n          /* &quot;I&#x27;m still hungry 😢\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        A triple-double is when a player records double-digit scores in three\n        categories. In Swift, triple-double quotes are used to create a  \n        <strong className=\"blog-bold\">Multi-line String</strong>. We can do this\n        the Java way or the Python way:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> javaWay: String =\n          &quot;This is a multi\\n&quot; + &quot;line\\n&quot; +\n          &quot;string&quot;\n          <br />‍<strong className=\"code-keyword\">var</strong> pythonWay: String\n          = &quot;&quot;&quot;\n          <br />\n          This is a multi\n          <br />\n          line <br />\n          string\n          <br />\n          &quot;&quot;&quot;\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\nexport default BasicDataTypes;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nexport const Classes = () => {\n  return (\n    <BlogSection title=\"Classes | Structs\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Classes and Structs Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        You may have noticed that I haven&#x27;t shown you how to create a class\n        yet. In Swift, we have Classes and Structures. If you were to copy a\n        Class, both the original and the copy would reference the same object.\n        If you copy a Struct object, they reference two unique Struct objects.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        Think of a Class as your reflection and a Struct as having an identical\n        twin. If you change your clothes, your reflection will have the same\n        changes. If you had a twin and changed your clothes, your twin\n        wouldn&#x27;t change too. I mean, you and your twin could match clothes,\n        but then you guys are just intentionally trying to confuse people 😅.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        A Struct and a Class have only a few differences in structure and\n        methods. We will start by looking at a{' '}\n        <strong className=\"blog-bold\">Structure</strong> or{' '}\n        <strong className=\"blog-bold\">Struct:</strong>\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">struct</strong> FoodStruct {'{'}\n          <br />‍<br />    // properties\n          <br />    <strong className=\"code-keyword\">static</strong>{' '}\n          <strong className=\"code-keyword\">var</strong> isEdible: Bool ={' '}\n          <strong className=\"code-keyword\">true</strong> // static property\n          <br />    <strong className=\"code-keyword\">var</strong> name: String\n          // public property\n          <br />    <strong className=\"code-keyword\">private</strong>{' '}\n          <strong className=\"code-keyword\">var</strong> rating: Int // private\n          property\n          <br />‍<br />    <strong className=\"code-keyword\">lazy</strong>{' '}\n          <strong className=\"code-keyword\">var</strong> isCooked: Bool ={' '}\n          <strong className=\"code-keyword\">true</strong> // lazy - intialized\n          when called\n          <br />‍<br />    // computed property\n          <br />    <strong className=\"code-keyword\">var</strong> ratingPercent:\n          String {'{'}\n          <br />        <strong className=\"code-keyword\">return</strong>{' '}\n          &quot;\\(\n          <strong className=\"code-keyword\">self</strong>.rating * 10)%\n          rating&quot;\n          <br />    {'}'}\n          <br />‍<br />    // property observers - run code before or after\n          changes\n          <br />        // didSet = run after change\n          <br />        // willSet = run before change\n          <br />    <strong className=\"code-keyword\">var</strong> cookPercent:\n          Int {'{'}\n          <br />        <strong className=\"code-keyword\">willSet</strong>\n          {'{'}\n          <br />            print(&quot;\\(name) is currently: \\(cookPercent)%\n          cooked&quot;)\n          <br />        {'}'}\n          <br />‍<br />        <strong className=\"code-keyword\">didSet</strong>\n          {'{'}\n          <br />            print(&quot;\\(name) changed to: \\(cookPercent)%\n          cooked&quot;)\n          <br />        {'}'}\n          <br />    {'}'}\n          <br />‍<br />    // constructor\n          <br />    <strong className=\"code-keyword\">init</strong>(\n          <strong className=\"code-keyword\">_</strong> name: String,{' '}\n          <strong className=\"code-keyword\">_</strong> rating: Int = 0,{' '}\n          <strong className=\"code-keyword\">_</strong> cookPercent: Int = 0){' '}\n          {'{'}\n          <br />        <strong className=\"code-keyword\">self</strong>.name =\n          name\n          <br />        <strong className=\"code-keyword\">self</strong>.rating =\n          rating\n          <br />        <strong className=\"code-keyword\">self</strong>\n          .cookPercent = cookPercent\n          <br />    {'}'}\n          <br />\n          <br />    // getter method\n          <br />    <strong className=\"code-keyword\">func</strong> getRating()\n          -&gt; Int? {'{'}\n          <br />        <strong className=\"code-keyword\">return</strong>{' '}\n          <strong className=\"code-keyword\">self</strong>.rating\n          <br />    {'}'}  <br />‍<br />    // setter method\n          <br />    <strong className=\"code-keyword\">mutating</strong>{' '}\n          <strong className=\"code-keyword\">func</strong> setRating(\n          <strong className=\"code-keyword\">_</strong> rating: Int) {'{'}\n          <br />        <strong className=\"code-keyword\">self</strong>.rating =\n          rating\n          <br />    {'}'}    <br />‍<br />    // static method\n          <br />    <strong className=\"code-keyword\">static</strong>{' '}\n          <strong className=\"code-keyword\">func</strong> printEnumType() {'{'}\n          <br />        print(&quot;I am a Food&quot;)\n          <br />    {'}'}\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        The <strong className=\"blog-bold\">static</strong>,{' '}\n        <strong className=\"blog-bold\">public </strong>and{' '}\n        <strong className=\"blog-bold\">private </strong>keywords serve the same\n        purpose as in Java. The &quot;isCooked&quot; property is a{' '}\n        <strong className=\"blog-bold\">Lazy Variable</strong>. A lazy variable is\n        a just-in-time calculation variable, meaning that a lazy variable is\n        born when needed to avoid unnecessary work. The\n        &quot;ratingPercent&quot; variable is a{' '}\n        <strong className=\"blog-bold\">Computed Property</strong>. A computed\n        property executes code and saves the result into that variable 🤯.\n        &quot;cookPercent&quot; is a{' '}\n        <strong className=\"blog-bold\">Property Observer</strong>. A property\n        observer is similar to Santa Claus. It sees your property when it&#x27;s\n        sleeping. It knows when it&#x27;s awake. If the property changes, Santa\n        will run code before or after changes are made to a property (check the\n        comments in the code for clarity).\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The following functions are available in Java, but with a different\n        syntax. In a Struct, to create a method that can change properties, the\n        keyword <strong className=\"blog-bold\">mutating </strong>must be used. To\n        allow for a Struct to be mutated, it must be a variable. If a Struct is\n        a constant, it can&#x27;t be mutated (even through mutating functions):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> food =\n          FoodStruct(&quot;Spaghetti&quot;,10)\n          <br />\n          print(food.ratingPercent)\n          <br />\n          food.cookPercent = 77\n          <br />\n          print(&quot;1 minute later...&quot;)\n          <br />\n          food.cookPercent = 100\n          <br />\n          <br />\n          /*\n          <br />\n          &quot;100% rating&quot;\n          <br />\n          &quot;Spaghetti is currently: 0% cooked&quot;\n          <br />\n          &quot;Spaghetti changed to: 77% cooked&quot;\n          <br />\n          &quot;1 minute later...&quot;\n          <br />\n          &quot;Spaghetti is currently: 77% cooked&quot;\n          <br />\n          &quot;Spaghetti changed to: 100% cooked\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Now let&#x27;s look at a <strong className=\"blog-bold\">Class</strong>:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">class</strong> Food {'{'}\n          <br />    <strong className=\"code-keyword\">static</strong>{' '}\n          <strong className=\"code-keyword\">var</strong> isEdible: Bool ={' '}\n          <strong className=\"code-keyword\">\n            true\n            <br />‍\n          </strong>{' '}\n             <strong className=\"code-keyword\">var</strong> name: String\n          <br />    <strong className=\"code-keyword\">private</strong>{' '}\n          <strong className=\"code-keyword\">var</strong> rating: Int\n          <br />    <br />    <strong className=\"code-keyword\">\n            lazy\n          </strong>{' '}\n          <strong className=\"code-keyword\">var</strong> isCooked: Bool ={' '}\n          <strong className=\"code-keyword\">\n            true\n            <br />‍\n          </strong>{' '}\n          <br />    <strong className=\"code-keyword\">var</strong> ratingPercent:\n          String {'{'}\n          <br />        &quot;\\(<strong className=\"code-keyword\">self</strong>\n          .rating * 10)% rating&quot;\n          <br />    {'}'}\n          <br />  <br />    <strong className=\"code-keyword\">var</strong>{' '}\n          cookPercent: Int {'{'}\n          <br />        <strong className=\"code-keyword\">willSet </strong>\n          {'{'}\n          <br />            print(&quot;\\(name) is currently: \\(cookPercent)%\n          cooked&quot;)\n          <br />        {'}'}      <br />  <br />      {' '}\n          <strong className=\"code-keyword\">didSet </strong>\n          {'{'}\n          <br />            print(&quot;\\(name) changed to: \\(cookPercent)%\n          cooked&quot;)\n          <br />        {'}'}\n          <br />    {'}'}\n          <br />  <br />    <strong className=\"code-keyword\">init</strong>(\n          <strong className=\"code-keyword\">_</strong> name: String,{' '}\n          <strong className=\"code-keyword\">_</strong> rating: Int = 0,{' '}\n          <strong className=\"code-keyword\">_</strong> cookPercent: Int = 0){' '}\n          {'{'}\n          <br />        <strong className=\"code-keyword\">self</strong>.name =\n          name\n          <br />        <strong className=\"code-keyword\">self</strong>.rating =\n          rating\n          <br />        <strong className=\"code-keyword\">self</strong>\n          .cookPercent = cookPercent\n          <br />    {'}'}\n          <br />   <br />    <strong className=\"code-keyword\">func</strong>{' '}\n          getRating() -&gt; Int? {'{'}\n          <br />        <strong className=\"code-keyword\">return</strong>{' '}\n          <strong className=\"code-keyword\">self</strong>.rating\n          <br />    {'}'}\n          <br />   <br />    <strong className=\"code-keyword\">func</strong>{' '}\n          overrideMe() {'{'}\n          <br />        print(&quot;Override me&quot;)\n          <br />    {'}'}\n          <br />   <br />    <strong className=\"code-keyword\">\n            static\n          </strong>{' '}\n          <strong className=\"code-keyword\">func</strong> printEnumType() {'{'}\n          <br />        print(&quot;I am a Food&quot;)\n          <br />    {'}'}  <br />  <br />    // setter method don&#x27;t need\n          mutating method anymore\n          <br />    <strong className=\"code-keyword\">func</strong> setRating(\n          <strong className=\"code-keyword\">_</strong> rating: Int) {'{'}\n          <br />        <strong className=\"code-keyword\">self</strong>.rating =\n          rating\n          <br />    {'}'}\n          <br />    <br />    // clean up the class when deallocated\n          <br />    <strong className=\"code-keyword\">deinit</strong> {'{'}\n          <br />        print(&quot;Mr. Stark, I don&#x27;t feel so good&quot;)\n          <br />    {'}'}\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Almost everything is the same! There are only two differences within the\n        Class (these are the methods with comments). The mutating keyword is not\n        used (if only we could say the same about covid 😫). In Structs and\n        Classes, we have an init function to initialize our object. In Classes\n        only, we also can have a{' '}\n        <strong className=\"blog-bold\">Deinitialization Function</strong>.\n        Deinitialization functions run when Class objects are deallocated from\n        memory. You could even have your Class print &quot;Mr. Stark, I\n        don&#x27;t feel so good&quot; if you wanted.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        If you wanted to make a Class that could not be inherited, you would\n        prepend <strong className=\"blog-bold\">final </strong>to it. Similar to\n        Java, parent Classes allow their children to inherit and override their\n        methods. Like how a child can override the genetics they inherited from\n        their parents. The parents could be 5&#x27;7&quot; and somehow the child\n        becomes 6&#x27;9&quot; 🥺. I should have drank more milk as a kid.\n        Anyway, a subclass can <strong className=\"blog-bold\">inherit </strong>\n        from a superclass, <strong className=\"blog-bold\">override </strong>and\n        call the superclass methods like so:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          // no claases can inherit from this class\n          <br />‍<strong className=\"code-keyword\">final</strong>{' '}\n          <strong className=\"code-keyword\">class</strong> KoreanFriedChicken:\n          Food {'{'}\n          <br />    <strong className=\"code-keyword\">private</strong>{' '}\n          <strong className=\"code-keyword\">var</strong> desc: String\n          <br />    <strong className=\"code-keyword\">init</strong>(\n          <strong className=\"code-keyword\">_</strong> name: String,{' '}\n          <strong className=\"code-keyword\">_</strong> rating: Int,{' '}\n          <strong className=\"code-keyword\">_</strong> cookPercent: Int = 0,{' '}\n          <strong className=\"code-keyword\">_</strong> desc: String =\n          &quot;Delicious&quot;) {'{'}\n          <br />        <strong className=\"code-keyword\">self</strong>.desc =\n          desc\n          <br />        <strong className=\"code-keyword\">super</strong>\n          .init(name, rating, cookPercent)\n          <br />    {'}'}\n          <br />    <br />    // override a method in superclass\n          <br />    <strong className=\"code-keyword\">override</strong>{' '}\n          <strong className=\"code-keyword\">func</strong> overrideMe() {'{'}\n          <br />        print(&quot;Overriden&quot;)\n          <br />    {'}'}\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        With Classes, we can instantiate them as constants and mutate their\n        properties. Although, we can only deallocate a Class object if it is a\n        variable: <br />‍<strong className=\"blog-bold\">Posture Check: </strong>\n        If you&#x27;re slouching, stop that 😂.\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          ‍<strong className=\"code-keyword\">let</strong> kfc =\n          KoreanFriedChicken(\n          <br />\n          &quot;Creamy Garlic Bite&quot;, <br />\n          10, <br />\n          100, <br />\n          &quot;Bad for a first date&quot;)\n          <br />‍<br />\n          <strong className=\"code-keyword\">var</strong> kfc2:\n          KoreanFriedChicken? = KoreanFriedChicken(\n          <br />\n          &quot;Creamy Garlic Bite&quot;, <br />\n          10, <br />\n          100, <br />\n          &quot;Bad for a first date&quot;)\n          <br />\n          kfc2 = <strong className=\"code-keyword\">nil</strong> // 😈👌💥\n          deallocated\n          <br />\n          <br />\n          /* &quot;Mr. Stark, I don&#x27;t feel so good\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        In Swift, the use of Structs is more used than Classes. You only use Classes if you need a reference-based object, an object that should be inherited, or need the ability to deinitialize an object.\n      </div>\n      <YoutubeWrap link=\"https://www.youtube.com/embed/zeW-ibe-8Qc\"/>\n    </BlogSection>\n  );\n};\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nexport const Closures = () => {\n  return (\n    <BlogSection title=\"Closures\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Closures Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        A closure is an act of closing something. A{' '}\n        <strong className=\"blog-bold\">Closure </strong>in Swift is a variable\n        that holds code. In part 2 of my Swift blog, I will cover these more\n        in-depth, but for now, let&#x27;s learn the basics. In Java, the lambda\n        expression would be the closest thing to a Closure. On its own, a\n        Closure looks like this:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">let</strong> closureWithReturn ={' '}\n          {'{'}\n          <br />    (num: Int) -&gt; Int{' '}\n          <strong>\n            in\n            <br />‍\n          </strong>{' '}\n             <strong className=\"code-keyword\">return</strong> 34 + 35 + num\n          <br />\n          {'}'}\n          <br />\n          print(closureWithReturn(8))\n          <br />\n          <br />\n          /* &quot;77\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        You might be wondering why you would ever create a closure when you\n        could make a function. The answer is that you wouldn&#x27;t create a\n        lonely closure. Closures are often inputs or outputs of functions.\n        Often, they are the last input parameter for functions:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> quickMath(\n          <strong className=\"code-keyword\">_</strong> num1: Int,{' '}\n          <strong className=\"code-keyword\">_</strong> num2: Int,{' '}\n          <strong className=\"code-keyword\">_</strong> closure:\n          (Int,Int)-&gt;Int) {'{'}\n          <br />    <strong className=\"code-keyword\">let</strong> res =\n          closure(num1, num2)\n          <br />    print(&quot;\\(num1) + \\(num2) = \\(res)&quot;)\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        You have two methods of passing it into a function. You can follow the\n        second method only if the closure is at the end of the input parameters\n        (<strong className=\"blog-bold\">Trailing Closure</strong>):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          // writing something similar to a lonely closure\n          <br />\n          quickMath(400, 3, {'{'}\n          <br />    (num1: Int, num2: Int) -&gt; Int{' '}\n          <strong>\n            in\n            <br />‍\n          </strong>{' '}\n             print(&quot;This closure does addition&quot;)\n          <br />    <strong className=\"code-keyword\">return</strong> num1 + num2\n          <br />\n          {'}'})<br />\n          <br />\n          // preferred\n          <br />\n          quickMath(580, 7){'{'}\n          <br />    print(&quot;This closure does addition&quot;)\n          <br />    <strong className=\"code-keyword\">return</strong> $0 + $1\n          <br />\n          {'}'}\n          <br />\n          <br />\n          /* &quot;This closure does addition&quot;\n          <br />\n          &quot;400 + 3 = 403\\n&quot; */\n          <br />\n          /* &quot;This closure does addition&quot;\n          <br />\n          &quot;580 + 7 = 587\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Not only can you input a closure, but you can also return one:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          // func that returns a closure\n          <br />‍<strong className=\"code-keyword\">func</strong> iWant(\n          <strong className=\"code-keyword\">_</strong> str: String) -&gt;\n          (String) -&gt; Void {'{'}\n          <br />    <strong className=\"code-keyword\">let</strong> start =\n          &quot;I want \\(str)&quot;\n          <br />    <strong className=\"code-keyword\">return</strong> {'{'}\n          <br />        print(start + &quot; and \\($0)!&quot;)\n          <br />    {'}'}\n          <br />\n          {'}'}\n          <br />‍<br />   // (func inputs)(closure inputs)\n          <br />\n          iWant(&quot;Steak&quot;)(&quot;Wine&quot;)\n          <br />\n          iWant(&quot;Chicken&quot;)(&quot;Mekju&quot;)\n          <br />\n          iWant(&quot;to eat delicious food&quot;)(&quot;lose weight&quot;)\n          <br />\n          <br />\n          /*\n          <br />\n          &quot;I want Steak and Wine&quot;\n          <br />\n          &quot;I want Chicken and Mekju&quot;\n          <br />\n          &quot;I want to eat delicious food and lost weight\\n&quot;*/\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        It does take a while to get used to it. Here&#x27;s how I tricked myself\n        into understanding it. Look at the FedEx logo:\n        <br />\n      </div>\n      <div\n        className=\"blog-img\"\n        style={{\n          backgroundImage: `url(\"https://www.fedex.com/content/dam/fedex-com/logos/FedEx-Logo.png\")`,\n        }}\n      ></div>\n      <div className=\"about-desc blog-content\">\n        Look in between the capital E and x. You can see an arrow. Now that\n        you&#x27;ve seen the arrow, it can never be unseen. Now, imagine\n        everything in between the first arrow and the open brace as what&#x27;s\n        returned. So if you ever see more than one arrow you&#x27;ll think of\n        FedEx, the vast amount of times that I&#x27;ve typed the word arrow\n        in this paragraph, and returning Closures. Fun fact, when an Air Nomad receives their blue arrow\n        tattoos when they master air bending (I recommend watching Avatar: the\n        Last 💨 if you haven&#x27;t already).\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nexport const Conditionals = () => {\n  return (\n    <BlogSection title=\"Conditionals\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID127\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Conditionals Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        <strong className=\"blog-bold\">Conditionals</strong>, if I&#x27;m so\n        hungry, why not just get a snack? Well, the answer to that is simple. My\n        order comes in 10 minutes, and it&#x27;ll taste so much better if I\n        wait. Anyway, we can use the{' '}\n        <strong className=\"blog-bold\">Logical Operators AND </strong>\n        &quot;&amp;&amp;&quot; and <strong className=\"blog-bold\">OR </strong>\n        &quot;||&quot; in the same way we use it in Java. Here is an example of\n        an ugly <strong className=\"blog-bold\">if-else statement</strong>:<br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">if</strong> mood == &quot;still\n          hungry&quot; || me.feeling == &quot;hangry&quot; {'{'}\n          <br />    print(&quot;Check phone for delivery time 😢&quot;)\n          <br />\n          {'}'} <strong className=\"code-keyword\">else</strong>{' '}\n          <strong className=\"code-keyword\">if</strong> mood == &quot;full&quot;\n          &amp;&amp; !isHungry {'{'}    <br />    print(&quot;&quot;&quot;\n          <br />        Take a nap!\n          <br />        You have food coma🥱\n          <br />        &quot;The drowsy sleepy feeling you get after eating a\n          large meal&quot; &quot;&quot;&quot;)\n          <br />\n          {'}'}\n          <strong className=\"code-keyword\">else </strong>\n          {'{'}    <br />    print(&quot;You are always hungry 🍗&quot;)\n          <br />\n          {'}'}\n          <br />‍<br />\n          /* &quot;Check phone for delivery time 😢\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Now let&#x27;s make a{' '}\n        <strong className=\"blog-bold\">Ternary Operator </strong>(if mood is not\n        &quot;still hungry&quot;, return &quot;Check phone for delivery time\n        😢&quot; else, return &quot;sleeeepyyy 😴&quot;. Check the location of\n        the question mark and colon!):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          print(mood != &quot;still hungry&quot; ?<br />        &quot;Check\n          phone for delivery time 😢&quot; : &quot;sleeeepyyy 😴&quot;)\n          <br />‍<br />\n          /* &quot;sleeeepyyy 😴\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Here is a Switch case:\n        <br />\n      </div>\n      <div\n        className=\"blog-img\"\n        style={{\n          backgroundImage: `url(\"https://images-na.ssl-images-amazon.com/images/I/81%2BcJVR3%2B0L._AC_SL1500_.jpg\")`,\n        }}\n      ></div>\n      <div className=\"about-desc blog-content\">\n        That&#x27;s the wrong Switch case 🤦. Another conditional that we can\n        use is a <strong className=\"blog-bold\">Switch-case</strong>. If\n        we&#x27;re trying to match a possible value of a variable, this would be\n        our best option:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">switch</strong> mood {'{'}\n          <br />    <strong className=\"code-keyword\">case</strong>{' '}\n          &quot;hungry&quot;:\n          <br />        print(&quot;as always&quot;)\n          <br />    <strong className=\"code-keyword\">case</strong>{' '}\n          &quot;sleeeepyyy 😴&quot;:\n          <br />        mood = &quot;Wooooo the food is here now!!!&quot;\n          <br />        print(mood)\n          <br />    <strong className=\"code-keyword\">default</strong>:<br />    \n             print(&quot;I love food 😂&quot;)\n          <br />\n          {'}'}\n          <br />‍<br />\n          /* &quot;Wooooo the food is here now!!!\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Switch-cases can also use ranges if the values are numeric.{' '}\n        <strong className=\"blog-bold\">Range operators </strong>are created by\n        typing an ellipsis &quot;...&quot; or &quot;..&lt;&quot; between\n        numbers:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">let</strong> happinessLevel: Int = 10\n          <br />‍<strong className=\"code-keyword\">\n            switch\n          </strong> happinessLevel {'{'}\n          <br />    <strong className=\"code-keyword\">case</strong> 1 ... 3:\n          <br />        print(&quot;1 - 3&quot;)\n          <br />    <strong className=\"code-keyword\">case</strong> 4 ..&lt; 7:\n          <br />        print(&quot;4 - 6&quot;)\n          <br />    <strong className=\"code-keyword\">case</strong> 7 ..&lt; 9:\n          <br />        print(&quot;7 - 8&quot;)\n          <br />    <strong className=\"code-keyword\">case</strong> 10:\n          <br />        print(&quot;Time to eat 😁&quot;)\n          <br />    <strong className=\"code-keyword\">default</strong>:<br />    \n             print(&quot;Wooooo the hunger related code is over!!&quot;)\n          <br />\n          {'}'}\n          <br />‍<br />\n          /* &quot;Time to eat 😁\\n&quot; */\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nexport const Dictionaries = () => {\n  return (\n    <BlogSection title=\"Dictionaries | Tuples\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID113\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Basic Dictionary Docs\n      </a>\n      <a\n        href=\"https://developer.apple.com/documentation/swift/dictionary\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Detailed Dictionary Docs\n      </a>\n      <a\n        href=\"https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID448\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Tuples Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Everything that I&#x27;ve introduced so far has been basic programming\n        concepts that can also be found in Java, sprinkled with bad jokes and\n        transitions. The following sections will cover more complex programming\n        concepts, but there is no need to worry! The bad jokes are here to stay\n        😈.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        In Swift and many other programming languages, we have a complex data\n        type similar to a dictionary. In Java, this would be called a HashMap.\n        In Swift, its called a{' '}\n        <strong className=\"blog-bold\">Dictionary </strong>\n        (key-value pair collection):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> wiki: [String: String] =\n          [\n          <br />    &quot;food coma&quot;: &quot;Postprandial somnolence or food\n          coma is a normal state of drowsiness or lassitude following a\n          meal&quot;,\n          <br />    &quot;hangry&quot;: &quot;bad-tempered or irritable as a\n          result of hunger&quot;\n          <br />]<br />‍<br />\n          // empty dictionaries\n          <br />‍<strong className=\"code-keyword\">var</strong> myStomach:\n          [String: String] = [:]\n          <br />‍<strong className=\"code-keyword\">var</strong> myStomach2 =\n          [String: String]()\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Now to get an item from the menu, you would call that menu item in\n        brackets. But, if you tried to order something that&#x27;s not in the\n        Dictionary, you would get <strong className=\"blog-bold\">nil </strong>\n        (nil == null). We could prevent this by providing a default value:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          wiki[&quot;food coma&quot;]\n          <br />\n          wiki[&quot;Bangers and mash&quot;] // nil\n          <br />\n          wiki[&quot;Bangers and mash&quot;, default: &quot;Some type of\n          food&quot;]\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        You may be wondering, &quot;why didn&#x27;t he just delete his bad\n        jokes?&quot; or &quot;what if I wanted to store different data types in\n        my Dictionary?&quot;. Unfortunately, we can&#x27;t do either. But we\n        have a solution to the second question! We can create a{' '}\n        <strong className=\"blog-bold\">Tuple </strong>and get a value:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> me = (firstName:\n          &quot;Michael&quot;,\n          <br />          lastName: &quot;Doctor&quot;,\n          <br />          feeling: &quot;feelings&quot;,\n          <br />          sleepyLevel: 10)\n          <br />\n          me.feeling\n        </div>\n      </div>\n      <YoutubeWrap link=\"https://www.youtube.com/embed/hS7YUE3lGoc\"/>\n    </BlogSection>\n  );\n};\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst End = () => {\n  return (\n    <BlogSection title=\"The End\">\n      <div className=\"about-desc blog-content\">\n        Congratulations! You survived the onslaught of horrible jokes, weird\n        analogies, random references, and the Swift programming language!\n        Hopefully, I didn&#x27;t bore you or make you cringe too many times 😅.\n        Wait for Part 2 for the actual implementation of the Swift language. I\n        hope you&#x27;re ready for the next barrage of useful and random facts,\n        next time on <span className=\"blog-strike\">🐉🏀Z</span> My Swift Blog!\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default End;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nexport const Enums = () => {\n  return (\n    <BlogSection title=\"Enumerations | Error Handling\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Enums Docs\n      </a>\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID515\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Error Handling Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        The e num is called Euler&#x27;s number and has a value of 2.718...\n        <strong className=\"blog-bold\"> Enumerations </strong>or{' '}\n        <strong className=\"blog-bold\">Enums </strong>in Swift have nothing to do\n        with that natural number. They allow us to define data types or group\n        related data: <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">enum</strong> BadJokeType {'{'}\n          <br />    <strong className=\"code-keyword\">case</strong> tolerable\n          <br />    <strong className=\"code-keyword\">case</strong> tooMuch(amt:\n          Int)\n          <br />    <strong className=\"code-keyword\">case</strong> painful\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Think of the cases in an enum as static properties of a Java class.\n        Enums are useful when a variable can only be a few specific values. An\n        enum case can also take parameters. Let&#x27;s write a function that\n        takes our new type as input:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> badJokeIndicator(\n          <strong className=\"code-keyword\">_</strong> val: BadJokeType) -&gt;\n          String? {'{'}\n          <br />    <strong className=\"code-keyword\">var</strong> res: String?\n          <br />    <strong className=\"code-keyword\">switch</strong> val {'{'}\n          <br />        <strong className=\"code-keyword\">\n            case\n          </strong> .tooMuch( <strong className=\"code-keyword\">let</strong> amt\n          ) <strong className=\"code-keyword\">where</strong> amt == 3000:\n          <br />            res = &quot;I love you \\(amt)&quot;\n          <br />        <strong className=\"code-keyword\">case</strong>{' '}\n          .tolerable, .tooMuch:\n          <br />            res ={' '}\n          <strong className=\"code-keyword\">\n            nil\n            <br />‍\n          </strong>{' '}\n                 <strong className=\"code-keyword\">case</strong> .painful:\n          <br />            res = &quot;I think you&#x27;re tired... Go to\n          sleep&quot;\n          <br />    {'}'}\n          <br />    <strong className=\"code-keyword\">return</strong> res\n          <br />\n          {'}'}\n          <br />‍<br />\n          // You can write these as one line or spaced out\n          <br />\n          print(\n          <br />    badJokeIndicator(\n          <br />        BadJokeType\n          <br />            .tooMuch(amt: 3000)\n          <br />    ) ?? &quot;I am Iron Man 😢&quot;\n          <br />)<br />‍<br />\n          print(\n          <br />    badJokeIndicator(\n          <br />        BadJokeType\n          <br />            .painful\n          <br />    ) ?? &quot;Not too bad yet!&quot;\n          <br />)<br />\n          /* &quot;I love you 3000\\n&quot; */\n          <br />\n          /* &quot;I think you&#x27;re tired... Go to sleep\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        It is common to use a switch-case with enums. The switch-case must be{' '}\n        <strong className=\"blog-bold\">Exhaustive</strong> (cover all enum\n        cases). A switch-case for enumerations must include all Fourteen\n        million, six hundred, and five possible outcomes 😈👌💥 (don&#x27;t make\n        an enum with that many 😅). That is why you can see &quot;tooMuch&quot;\n        in two cases.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        Enums can be used to quote the Avengers using a switch-case or could be\n        used to create an error:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">enum</strong> JokeNotFound: Error{' '}\n          {'{'}\n          <br />    <strong className=\"code-keyword\">case</strong> joke404\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Now, you may be wondering, &quot;did he cry watching Avengers?&quot; or\n        &quot;is it possible to{' '}\n        <strong className=\"blog-bold\">throw an error </strong>in Swift?&quot;.\n        The answer is yes. You can also use the{' '}\n        <strong className=\"blog-bold\">throws </strong>keyword and create the\n        Swift version of a{' '}\n        <strong className=\"blog-bold\">try-catch block</strong>:<br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> ThrowsJoke(){' '}\n          <strong className=\"code-keyword\">throws</strong> -&gt; Void{'{'}\n          <br />    <strong className=\"code-keyword\">throw</strong>{' '}\n          JokeNotFound.joke404\n          <br />\n          {'}'}\n          <br />‍<br />\n          <strong className=\"code-keyword\">do </strong>\n          {'{'}\n          <br />    <strong className=\"code-keyword\">try</strong> ThrowsJoke()\n          <br />    print(&quot;Woo didn&#x27;t force a joke&quot;)\n          <br />\n          {'}'} <strong className=\"code-keyword\">catch </strong>\n          {'{'}\n          <br />    print(&quot;Do not TRY to THROW a pun! We will CATCH\n          it...🤦&quot;)\n          <br />\n          {'}'}\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nexport const Extensions = () => {\n  return (\n    <BlogSection title=\"Extensions\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/Extensions.html\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Extensions Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Extensions make a woman&#x27;s hair longer and voluminous. Swift\n        Extensions do the same thing! Swift{' '}\n        <strong className=\"blog-bold\">Extensions </strong>allow us to add or\n        modify data types and Protocols:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">extension</strong> Int {'{'}\n          <br />    <strong className=\"code-keyword\">func</strong> divBy1()\n          -&gt; Int {'{'}\n          <br />        print(&quot;Such a useful function 😂&quot;)\n          <br />        <strong className=\"code-keyword\">return</strong>{' '}\n          <strong className=\"code-keyword\">self</strong> / 1<br />    {'}'}\n          <br />‍<br />    <strong className=\"code-keyword\">\n            mutating\n          </strong>{' '}\n          <strong className=\"code-keyword\">func</strong> incr() {'{'}\n          <br />        <strong className=\"code-keyword\">self</strong> += 1\n          <br />    {'}'}\n          <br />\n          {'}'}\n          <br />\n          <br />‍<strong className=\"code-keyword\">var</strong> extendMe: Int = 8\n          <br />\n          print(extendMe.divBy1())\n          <br />\n          extendMe.incr()\n          <br />\n          print(extendMe)\n          <br />\n          <br />\n          /*\n          <br />\n          &quot;Such a useful function 😂&quot;\n          <br />\n          &quot;8&quot;\n          <br />\n          &quot;9\\n&quot; */\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nexport const Functions = () => {\n  return (\n    <BlogSection title=\"Functions\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/Functions.html\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Function Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Congratulations! You survived the onslaught of horrible jokes from the\n        previous section. Now that I&#x27;ve finished eating and my brain is{' '}\n        <strong className=\"blog-bold\">FUNCTION</strong>ing ... 🤦:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> innerThoughts(str:\n          String = &quot;disappointing transitions&quot;) {'{'}\n          <br />    print(&quot;I&#x27;m so \\(str) &quot;)\n          <br />\n          {'}'}\n          <br />‍<strong className=\"code-keyword\">func</strong>{' '}\n          innerThoughts2(str: String = &quot;full&quot; ) -&gt; Void {'{'}\n          <br />    print(&quot;I&#x27;m so \\(str) &quot;)\n          <br />\n          {'}'}\n          <br />‍<br />\n          innerThoughts(str: &quot;full&quot;)\n          <br />\n          innerThoughts2()\n          <br />‍<br />\n          /* &quot;I&#x27;m so full\\n&quot; */\n          <br />\n          /* &quot;I&#x27;m so full\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Can you spot the differences between the two? They both do the same\n        thing! The arrow &quot;-&gt; Void&quot; is the same as saying that the\n        function will not return anything. It&#x27;s like how you will not\n        return if I make another bad transition. The other difference is that\n        the second call did not pass any arguments but still printed the same\n        thing. That is because we set a default value for the &quot;str&quot;\n        parameter.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        As you can see, we needed to put &quot;str: &quot; if we passed an\n        argument into our function. There is a way to avoid this. We would do\n        this by setting an{' '}\n        <strong className=\"blog-bold\">external and internal name </strong>for\n        our parameters. The internal name is like the name that people call me\n        before suffering through my transitions. The external name (underscore)\n        is what they&#x27;ll call me after (nothing, and I don&#x27;t blame them\n        😂):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> sleepyLevels(\n          <strong className=\"code-keyword\">_</strong> lvl: Int) -&gt; String{' '}\n          {'{'}\n          <br />    <strong className=\"code-keyword\">return</strong>{' '}\n          &quot;Sleepiness out of 10 = \\(lvl)&quot;\n          <br />\n          {'}'}\n          <br />\n          print(sleepyLevels(10))\n          <br />‍<br />\n          /* &quot;Sleepiness out of 10 = 10\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        If you wanted to have a{' '}\n        <strong className=\"blog-bold\">Variadic function </strong>(a function\n        that can take a variable number of arguments), place an ellipsis\n        &quot;...&quot; after the datatype:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> myMoodsToday(\n          <strong className=\"code-keyword\">_</strong> moods: String...) {'{'}\n          <br />    <strong className=\"code-keyword\">for</strong> mood{' '}\n          <strong className=\"code-keyword\">in</strong> moods {'{'}\n          <br />        print(mood)\n          <br />    {'}'}\n          <br />\n          {'}'}\n          <br />\n          myMoodsToday(&quot;sleepy&quot;, &quot;Hungry&quot;, &quot;still\n          hungry&quot;, &quot;happy&quot;, &quot;disappointed&quot;,\n          &quot;sleepy&quot;)\n          <br />‍<br />\n          /* &quot;\n          <br />\n          sleepy\n          <br />\n          Hungry\n          <br />\n          still hungry\n          <br />\n          happy\n          <br />\n          disappointed\n          <br />\n          sleepy\\n&quot; */\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst Introduction = () => {\n  return (\n    <BlogSection title=\"Introduction\">\n      <div className=\"about-desc blog-content\">\n        Are you a developer with Java experience? Then this blog post is for\n        you!\n      </div>\n      <div className=\"about-desc blog-content\">\n        Both Java and Swift are general-purpose, compiled programming languages.\n        So if you understand Java, Swift will make sense to you (hopefully)! Swift was developed by Apple and used for macOS, iOS, watchOS, tvOS, and more. In this blog, we will focus on learning how to read and write the Swift language. It's similar to learning how to do karate. We must learn how to \"wax on, wax off\" before winning a tournament with an illegal kick 🥋. In my next blog, I will show you how to use Swift to create an iOS app!\n      </div>\n      <div className=\"about-desc blog-content\">\n        Basic programming knowledge is required to understand this blog. If you\n        are a beginner, I would recommend{' '}\n        <a\n          href=\"https://www.hackingwithswift.com/100\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"blog-text-link\"\n        >\n          Paul Hudson&#x27;s 100 Days of Swift\n        </a>\n        . Regardless of if you have coding experience with Java or another\n        language, I can guarantee that at least you won&#x27;t fall asleep\n        reading this blog. Instead, you might get hungry or cringe 😅. Sorry,\n        I&#x27;m writing this while waiting for my food, so a lot of my example\n        code will be food-related.\n      </div>\n    </BlogSection>\n  );\n};\nexport default Introduction;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nexport const Loops = () => {\n  return (\n    <BlogSection title=\"Loops\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Loops Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Loops! Froot loops, belt loops, loop de loops. There are many types of\n        loops and many ways to create loops in Swift. Let&#x27;s start with the{' '}\n        <strong className=\"blog-bold\">for-loop </strong>that we are used to:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">for</strong> i{' '}\n          <strong className=\"code-keyword\">in</strong> 0 ..&lt;\n          todaysOrder.count {'{'}\n          <br />    print(todaysOrder[i])\n          <br />\n          {'}'}\n          <br />‍<br />\n          /* <br />\n          &quot;C2. Hot Soy Garlic Chicken&quot;   <br />\n          &quot;C9. Creamy Garlic Chicken Bite&quot;\n          <br />\n          &quot;C9. Creamy Garlic Chicken Bite&quot;\n          <br />\n          &quot;C3. Krabby Patty\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        The syntax looks different from Java but makes sense when compared to a\n        Java for-loop. What if we only need the values inside of the Array?:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">for</strong> order{' '}\n          <strong className=\"code-keyword\">in</strong> todaysOrder {'{'}\n          <br />    print(order)\n          <br />\n          {'}'}\n          <br />‍<br />\n          /* <br />\n          &quot;C2. Hot Soy Garlic Chicken&quot;   <br />\n          &quot;C9. Creamy Garlic Chicken Bite&quot;\n          <br />\n          &quot;C9. Creamy Garlic Chicken Bite&quot;\n          <br />\n          &quot;C3. Krabby Patty\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        <strong className=\"blog-bold\">While </strong>reading this blog, you may\n        have noticed that Swift differs in the use of brackets most of the time.\n        The while loop is no exception to that (I&#x27;m not going to lie. I\n        can&#x27;t try to be funny WHILE I&#x27;m eating...🤦):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> num = 0<br />‍\n          <strong className=\"code-keyword\">while</strong> num &lt; 2 {'{'}\n          <br />    print(num)\n          <br />    num += 1<br />\n          {'}'}\n          <br />‍<br />\n          /* &quot;0\\n1\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        As with Java, <strong className=\"blog-bold\">continue </strong>(skips\n        that iteration) and <strong className=\"blog-bold\">break </strong>(break\n        out of the loop) keywords are sometimes needed. But for real, I should\n        not DO this blog WHILE eating...🤦 (Yes, it is the same as a{' '}\n        <strong className=\"blog-bold\">do-while loop </strong>in Java):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">repeat </strong>\n          {'{'}\n          <br />    <strong className=\"code-keyword\">if</strong> num == 2 {'{'}\n          <br />        num -= 1<br />        \n          <strong className=\"code-keyword\">\n            continue\n            <br />‍\n          </strong>{' '}\n             {'}'}\n          <br />    print(num)\n          <br />    num -= 1<br />\n          {'}'} <strong className=\"code-keyword\">while</strong> num &gt;= 0\n          <br />‍\n          <br />\n          /* &quot;1\\n0\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        In Swift, &quot;break&quot; can be used on the outermost loop of a\n        nested loop!:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          getMeOutThesePunsHurt: <strong className=\"code-keyword\">for</strong>{' '}\n          <strong className=\"code-keyword\">_</strong>{' '}\n          <strong className=\"code-keyword\">in</strong> 0 ..&lt; 2 {'{'}\n          <br />    <strong className=\"code-keyword\">for</strong>{' '}\n          <strong className=\"code-keyword\">_</strong>{' '}\n          <strong className=\"code-keyword\">in</strong> 0 ..&lt; 2 {'{'}\n          <br />        <strong className=\"code-keyword\">break</strong>{' '}\n          getMeOutThesePunsHurt\n          <br />    {'}'}\n          <br />\n          {'}'}\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst Operators = () => {\n  return (\n    <BlogSection title=\"Operators\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Operators Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Operator, a movie starring Martin Starr and Mae Whitman. <strong className=\"blog-bold\">Operators</strong> perform\n        mathematical, relational or logical operation. The basic{' '}\n        <strong className=\"blog-bold\">math operators</strong> would be the same\n        things we learned as kids. The only difference is that we need to care\n        about the type of data. That mean's that we need to{' '}\n        <strong className=\"blog-bold\">convert </strong>some values in Swift:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> yearDouble: Double =\n          2020.2\n          <br />‍<br />\n          // var year = yearDouble + 1 will give you an error\n          <br />‍<strong className=\"code-keyword\">var</strong> year: Int =\n          Int(yearDouble) + 1\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        We all know how to do addition, subtraction, multiplication, and\n        division (most of the time 😅). Here&#x27;s the lazy way of{' '}\n        <strong className=\"blog-bold\">modifying and reassigning </strong>a\n        variable:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          year += 1<br />\n          year -= 1<br />\n          year *= 1<br />\n          year /= 1<br />\n          year %= 2\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        <strong className=\"blog-bold\">Comparison Operators </strong>are pretty\n        straightforward and often used with conditionals. The only difference\n        is that in Swift, we can check if Strings are equal using comparison\n        operators (🤯 No more .equals(&quot;string&quot;)):\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">let</strong> hungerBefore: Int = 8\n          <br />‍<strong className=\"code-keyword\">var</strong> hungerNow: Int =\n          9<br />\n          print(&quot;My hunger level now is greater than my hunger level 10\n          minutes before? \\(hungerNow &gt; hungerBefore)&quot;)\n          <br />‍<br />\n          <strong className=\"code-keyword\">var</strong> compare: Bool =\n          &quot;still hungry&quot; == mood\n          <br />\n          compare = &quot;not hungry&quot; != mood\n          <br />\n          compare = hungerNow &gt;= hungerBefore\n          <br />\n          compare = hungerNow &lt; hungerBefore\n          <br />‍<br />\n          isHungry = <strong className=\"code-keyword\">false</strong>\n          <br />\n          compare = !isHungry\n          <br />‍<br />‍<strong className=\"code-keyword\">let</strong>{' '}\n          thatsMySecretCap: String = &quot;I&#x27;m always angr... hungry&quot;\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\nexport default Operators;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nexport const Optionals = () => {\n  return (\n    <BlogSection title=\"Optionals\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Optionals Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        Either I have a decent joke or no joke at all. If I don&#x27;t know if I\n        have a joke, I shouldn&#x27;t force it (this makes more sense later).\n        Not knowing if there will be a joke is similar to an Optional. An{' '}\n        <strong className=\"blog-bold\">Optional </strong>can either have a value\n        or be nil. An optional is created by having a data type and a trailing\n        question mark:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> badJokeCounter(\n          <strong className=\"code-keyword\">_</strong> num: Int) -&gt; String?{' '}\n          {'{'}\n          <br />    <strong className=\"code-keyword\">if</strong> num &gt;= 10{' '}\n          {'{'}\n          <br />        <strong className=\"code-keyword\">return</strong>{' '}\n          <strong className=\"code-keyword\">\n            nil\n            <br />‍\n          </strong>{' '}\n             {'}'}\n          <br />    <strong className=\"code-keyword\">return</strong>{' '}\n          &quot;Number of bad jokes = \\(num)&quot;\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        If you know that there is no way that the joke is nil, you can{' '}\n        <strong className=\"blog-bold\">Force Unwrap </strong>the Optional by\n        appending an exclamation mark to it:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          print(badJokeCounter(9)!)\n          <br />‍<br />\n          /* &quot;Number of bad jokes = 9\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        But as you saw from the previous sections, it&#x27;s dangerous to assume\n        that my jokes will be decent. In other words, it is best not to force\n        it. I&#x27;m talking about Optionals and not my jokes (Fine! I was\n        talking about both 😓). There are two safe ways of unwrapping your\n        Optionals. These are the if-let statement and nil coalescing.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The if-let statement or <strong className=\"blog-bold\">Optional Binding </strong>attempts to\n        unwrap the Optional by implementing the if-else conditional. If the\n        unwrapped returns nothing (unwrapped == nil), the else block is\n        executed:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">if</strong>{' '}\n          <strong className=\"code-keyword\">let</strong> unwrapped =\n          badJokeCounter(10) {'{'}\n          <br />    print(unwrapped) // if it is a string\n          <br />\n          {'}'} <strong className=\"code-keyword\">else</strong> {'{'}\n          <br />    print(&quot;😴💤&quot;) // if its nil\n          <br />\n          {'}'}\n          <br />‍<br />\n          /* &quot;😴💤\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        The <strong className=\"blog-bold\">Nil Coalescing </strong>attempts to\n        unwrap the Optional by assigning it to a variable, returning a default\n        value if it is nil. Similar to when I make a weird joke, two question marks are\n        typed. It is created by placing two question marks followed by a default\n        value:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">let</strong> jokeLvl =\n          badJokeCounter(10) ?? &quot;😴💤&quot;\n          <br />\n          print(jokeLvl)\n          <br />‍<br />\n          /* &quot;😴💤\\n&quot; */\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        If you don&#x27;t mind joke == nil, then you can try optional chaining.{' '}\n        <strong className=\"blog-bold\">Optional Chaining </strong>allows you to\n        access the Optional&#x27;s properties and methods if it is not nil. If\n        it is nil, the function calls after the question mark will not be\n        attempted:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">let</strong> badJoke =\n          badJokeCounter(9)?\n          <br />    .uppercased()\n          <br />‍<strong className=\"code-keyword\">let</strong> badJoke2 =\n          badJokeCounter(10)?\n          <br />    .uppercased()\n        </div>\n      </div>\n      <YoutubeWrap link=\"https://www.youtube.com/embed/wVlbl3Ck6NU\"/>\n    </BlogSection>\n  );\n};\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nexport const Protocols = () => {\n  return (\n    <BlogSection title=\"Protocols\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Protocols Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        A Swift <strong className=\"blog-bold\">Protocol </strong>is a set of\n        required properties and methods that a Struct, Enum, or Class must\n        implement. Think of a Protocol as a blueprint similar to the Krabby\n        Patty secret formula. A Protocol in Java would be an interface:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">protocol</strong> KrabbyPattyFormula{' '}\n          {'{'}\n          <br />    <strong className=\"code-keyword\">var</strong> ingredients:\n          [String] {'{'} <strong className=\"code-keyword\">get</strong>{' '}\n          <strong className=\"code-keyword\">set</strong> {'}'}\n          <br />    <strong className=\"code-keyword\">var</strong> cookingTime:\n          Int {'{'} <strong className=\"code-keyword\">get</strong>{' '}\n          <strong className=\"code-keyword\">set</strong> {'}'}\n          <br />    <strong className=\"code-keyword\">func</strong>{' '}\n          ayeAyeCaptain()\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        The <strong className=\"blog-bold\">get</strong> and{' '}\n        <strong className=\"blog-bold\">set</strong> in between the braces\n        indicate that the property can be acquired and mutated.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst Setup = () => {\n  return (\n    <BlogSection title=\"Setup\">\n      <div className=\"about-desc blog-content\">\n        This blog will only be of use if you have a Mac computer with macOS\n        10.15 or higher. So join me in the dark side and get trapped in the\n        Apple ecosystem! 😈\n      </div>\n      <div\n        className=\"blog-img\"\n        style={{\n          backgroundImage: `url(\"https://images.unsplash.com/photo-1537498425277-c283d32ef9db?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1957&q=80\")`,\n        }}\n      ></div>\n      <div className=\"about-desc blog-content\">\n        If you don&#x27;t want to spend your money on a Mac computer, you can\n        always try running a VMware or VirtualBox for macOS. You can also try\n        the Swift programming language here:\n      </div>\n      <a\n        href=\"https://www.tutorialspoint.com/compile_swift_online.php\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Swift Online Program\n      </a>\n      <div className=\"about-desc blog-content\">\n        With that out of the way, let&#x27;s install the Xcode IDE:\n        <br />\n      </div>\n      <ol className=\"blog-list\">\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Go to the App Store\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Install Xcode\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Wash your hands\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Grab a snack because that install will take a while\n          </div>\n        </li>\n      </ol>\n      <div className=\"about-desc blog-content\">\n        As a child, I played{' '}\n        <a\n          href=\"http://www.push2play.ca/games/grounders/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"blog-text-link\"\n        >\n          Grounders\n        </a>{' '}\n        with my friends on a playground. The first thing we will do is create a\n        &quot;Playground&quot; file to play with ourselves and Swift:\n        <br />\n      </div>\n      <ol className=\"blog-list\">\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Open up Xcode\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Go to the menu bar up top\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Press &quot;File&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Press &quot;New&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Press &quot;Playground&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Choose the &quot;Blank&quot; Template\n          </div>\n        </li>\n      </ol>\n      <div\n        className=\"blog-img\"\n        style={{\n          backgroundImage: `url(\"https://uploads-ssl.webflow.com/5f9a24556170f63ee516953f/6026005604cd51a8e5d83e75_1.png\")`,\n        }}\n      ></div>\n    </BlogSection>\n  );\n};\nexport default Setup;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst Variables = () => {\n  return (\n    <BlogSection title=\"Comments | Variables | Constants\">\n      <a\n        href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID310\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Constants and Variables Docs\n      </a>\n      <div className=\"about-desc blog-content\">\n        We will begin with something simple. Let&#x27;s create\n        <strong className=\"blog-bold\"> Comments</strong>! Similar to Youtube,\n        you can create a comment at the bottom of this blog 😅. But in Swift, we\n        can create single line comments with &quot;command&quot; +\n        &quot;/&quot;. We can also create documentation comments by typing\n        &quot;command&quot; + &quot;option&quot; + &quot;/&quot;. : <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          // Single-line comment\n          <br />‍<br />\n          /* Multi-line comment\n          <br />\n          <strong>\n            In the code below, multi-line comments will be used to emulate a\n            print statement.\n          </strong>\n          <br />\n          <br />\n          <strong>Understanding the code:</strong>\n          <br />\n          <strong className=\"code-keyword\">    (Swift keyword)</strong> (normal\n          code):\n          <br />\n          <strong className=\"code-keyword\">        var</strong> watermelon =\n          &quot;colors&quot;\n          <br />\n          <strong className=\"code-keyword\">    </strong>\n          <span className=\"code-error\">\n            Error Code: <br />\n          </span>{' '}\n                 <span className=\"code-error\">var 77watermelon</span>\n          <br />\n          */\n          <br />\n          <br />\n          /// Documentation comment\n          <br />\n          /// &lt;#Description#&gt;\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        You will notice that any differences between Swift and Java are usually\n        the syntax. Now let&#x27;s start by storing\n        data in a <strong className=\"blog-bold\">Variable </strong>without type\n        annotation:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">var</strong> mood =\n          &quot;Hungry&quot;\n          <br />\n          mood = &quot;still hungry&quot;\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        If we tried this with Java, Java would growl at you like my stomach is\n        growling at me. Now let&#x27;s create a{' '}\n        <strong className=\"blog-bold\">Constant </strong>and try the same thing:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">let</strong> orderStatus = &quot;Mark\n          is on the way with your Order.&quot;\n          <br />\n          <span className=\"code-error\">\n            orderStatus = &quot;Heads up! Your courier is about to arrive.&quot;{' '}\n          </span>\n          <br />\n          <span className=\"code-error\"></span>\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Uh oh, Swift is getting hangry because you can&#x27;t change a\n        constant&#x27;s data no matter how much you want it to be true 😭.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default Variables;\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nconst Sets = () => {\n  return (\n    <BlogSection title=\"Sets\">\n      <YoutubeWrap link=\"https://www.youtube.com/embed/4F4mI9wJF3c\"/>\n    </BlogSection>\n  );\n};\nexport default Sets;\n","import React from 'react';\nimport Arrays from '../BlogSections1/Arrays';\nimport BasicDataTypes from '../BlogSections1/BasicDataTypes';\nimport { Classes } from '../BlogSections1/Classes';\nimport { Closures } from '../BlogSections1/Closures';\nimport { Conditionals } from '../BlogSections1/Conditionals';\nimport { Dictionaries } from '../BlogSections1/Dictionaries';\nimport End from '../BlogSections1/End';\nimport { Enums } from '../BlogSections1/Enums';\nimport { Extensions } from '../BlogSections1/Extensions';\nimport { Functions } from '../BlogSections1/Functions';\nimport Introduction from '../BlogSections1/Introduction';\nimport { Loops } from '../BlogSections1/Loops';\nimport Operators from '../BlogSections1/Operators';\nimport { Optionals } from '../BlogSections1/Optionals';\nimport { Protocols } from '../BlogSections1/Protocols';\nimport Setup from '../BlogSections1/Setup';\nimport Variables from '../BlogSections1/Variables';\nimport Sets from '../BlogSections1/Sets'\n\nconst BlogSections = () => {\n  return (\n    <div className=\"section-desc\">\n      <Introduction />\n      <Setup />\n      <Variables />\n      <BasicDataTypes />\n      <Operators />\n      <Arrays />\n      <Conditionals />\n      <Loops />\n      <Functions />\n      <Sets />\n      <Dictionaries />\n      <Optionals />\n      <Enums />\n      <Classes />\n      <Closures />\n      <Protocols />\n      <Extensions />\n      <End />\n    </div>\n  );\n};\nexport default BlogSections;\n","import React from 'react';\n\nconst newLine = text => {\n  return text.split('\\n').map(str => <p>{str}</p>);\n};\nexport default newLine;\n","import React from 'react';\nimport newLine from '../../hooks/newLine.hook';\n\nconst BlogComment = ({ name, date, content }) => {\n  return (\n    <div className=\"comment\">\n      <div className=\"comment-name\">{name}</div>\n      <div className=\"comment-date\">{date}</div>\n      <div className=\"comment-content\">{newLine(content)}</div>\n    </div>\n  );\n};\nexport default BlogComment;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useAxios = (url, setData) => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await axios.get(url);\n        const resJson = await res.data;\n        setData(resJson);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [url, setData]);\n  return { loading, error };\n};\nexport default useAxios;","import React, { useState, useEffect, useRef } from 'react';\nimport BlogComment from './BlogComment';\nimport DjangoCSRFToken from 'django-react-csrftoken';\nimport axios from 'axios';\nimport useAxios from '../../hooks/useAxios.hook';\nimport PageLoader from '../pageLoader/PageLoader';\nimport moment from 'moment';\n\nconst BlogCommentSection = ({ blog }) => {\n  const [comments, setComments] = useState();\n  const [inputs, setInputs] = useState({});\n  const authorRef = useRef();\n  const commentRef = useRef();\n  const [loadingComments, setLoadingComments] = useState(true);\n  useEffect(() => {\n    setInputs({\n      csrfmiddlewaretoken: document.getElementsByName('csrfmiddlewaretoken')[0]\n        .value,\n    });\n  }, []);\n  useEffect(() => {\n    if (comments) {\n      setLoadingComments(false);\n    }\n  }, [comments]);\n  const baseUrl = 'https://michael-doctor.me';\n  // const baseUrl = 'http://localhost:8000';\n\n  useAxios(`${baseUrl}/api/blog/comment/${blog}/`, setComments);\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setInputs({ ...inputs, [name]: value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let { csrfmiddlewaretoken, author, content } = inputs;\n    if (!author) author = authorRef.current.value;\n    if (!content) content = commentRef.current.value;\n    setInputs({ csrfmiddlewaretoken, author, content });\n    createComment({ csrfmiddlewaretoken, author, content, blog });\n  };\n\n  const createComment = ({ csrfmiddlewaretoken, author, content, blog }) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': csrfmiddlewaretoken,\n      },\n    };\n\n    const body = JSON.stringify({ blog, author, content });\n\n    axios\n      .post(`${baseUrl}/api/blog/create/comment/`, body, config)\n      .then(res => {\n        commentRef.current.value = '';\n        let tempComments = {};\n\n        comments\n          ? (tempComments = {\n              length: comments.length + 1,\n              comments: [res.data, ...comments.comments],\n            })\n          : (tempComments = {\n              length: 1,\n              comments: [res.data],\n            });\n        setComments(tempComments);\n      })\n      .catch(err => {\n        commentRef.current.value =\n          '***** An Error Occured! Try again later 😭*****';\n        authorRef.current.disabled = true;\n        commentRef.current.disabled = true;\n      });\n  };\n  return (\n    <div className=\"comment-section\">\n      <div className=\"hr\" />\n      <div className=\"comment-item comments\">\n        <div className=\"num-com-wrap\">\n          <div className=\"comment-name\">\n            {!loadingComments ? comments.length : 'Loading'} Comment\n            {loadingComments ? 's' : comments.length === 1 ? '' : 's'}\n          </div>\n        </div>\n        <div className=\"comment-form-wrap\">\n          <div className=\"blog-form-block\">\n            <form className=\"blog-form\" onSubmit={handleSubmit}>\n              <DjangoCSRFToken />\n              <input\n                type=\"text\"\n                className=\"blog-text-field w-input\"\n                maxLength=\"100\"\n                name=\"author\"\n                placeholder=\"Name\"\n                id=\"author\"\n                onChange={handleChange}\n                ref={authorRef}\n                required\n              />\n              <textarea\n                name=\"content\"\n                maxLength=\"5000\"\n                id=\"content\"\n                placeholder=\"Type your comments here!\"\n                className=\"blog-text-field blog-text-area w-input\"\n                onChange={handleChange}\n                ref={commentRef}\n                required\n              />\n              <input\n                type=\"submit\"\n                value=\"Comment\"\n                className=\"slider-btn hover1 proj-btn w-button\"\n              />\n            </form>\n          </div>\n        </div>\n        {!loadingComments ? (\n          comments.comments.map(({ id, author, content, date }) => (\n            <BlogComment\n              key={id}\n              name={author}\n              date={moment(date).format('MMMM DD, YYYY')}\n              content={content}\n            />\n          ))\n        ) : (\n          <PageLoader />\n        )}\n      </div>\n    </div>\n  );\n};\nexport default BlogCommentSection;\n","import React from 'react';\nimport Footer from '../Footer/Footer';\nimport BlogCommentSection from './BlogCommentSection';\n\nconst BlogWrap = ({ blog, children }) => {\n  return (\n    <div className=\"content-container\">\n      <div className=\"nav-gap\" />\n      <div className=\"info-content\">\n        <div className=\"about-me-container\">\n          <div className=\"blog-wrap\">{children}</div>\n        </div>\n      </div>\n      <BlogCommentSection blog={blog} />\n      <Footer />\n    </div>\n  );\n};\nexport default BlogWrap;\n","import React from 'react';\nimport BlogMainHeader from '../components/Blog/BlogMainHeader';\nimport BlogSections from '../components/Blog/BlogSections';\nimport BlogWrap from '../components/Blog/BlogWrap';\nimport Navbar from '../components/Navbar/Navbar';\nimport useScript from '../hooks/useScript.hook';\n\nconst Blog1 = () => {\n  useScript(\n    'https://res.cloudinary.com/hsse18xji/raw/upload/v1606877900/portfolio/js/jquery_xpecxx.js',\n  );\n  useScript(\n    'https://res.cloudinary.com/hsse18xji/raw/upload/v1607053094/portfolio/js/webflow.animation_skydrw.js',\n  );\n  return (\n    <div className=\"container\">\n      <Navbar />\n      <BlogWrap blog={1}>\n        <BlogMainHeader\n          titleMain=\"Swift Blog Part 1:\"\n          titleSub=\"The Language\"\n          author=\"Michael Doctor\"\n          date=\"February 27, 2021\"\n        />\n        <BlogSections />\n      </BlogWrap>\n    </div>\n  );\n};\nexport default Blog1;\n","import React from 'react';\nconst Footer = () => {\n  return (\n    <div\n      data-w-id=\"f50d5e09-e817-9552-6d28-c27f47cc01b0\"\n      className=\"footer opacity-scroll\"\n    >\n      <div className=\"hr\"></div>\n      <div className=\"footer-container\" id=\"footer\">\n        <div className=\"footer-info\">\n          <h5 className=\"footer-header\">Michael Doctor&#x27;s Portfolio</h5>\n          <div className=\"footer-desc\">\n            My personal website portfolio was made with React, Django,\n            PostgreSQL, and Webflow.\n          </div>\n        </div>\n        <div className=\"footer-links\">\n          <h5 className=\"footer-header\">Links</h5>\n          <a\n            href=\"https://github.com/MichaelDoctor\"\n            className=\"link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-github\" /> Github\n          </a>\n          <a\n            href=\"https://www.linkedin.com/in/michael-doctor-403/\"\n            className=\"link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-linkedin\" /> LinkedIn\n          </a>\n        </div>\n        <div className=\"footer-contact\">\n          <h5 className=\"footer-header\">Contact Info</h5>\n          <h6 className=\"footer-name\">Michael Doctor</h6>\n          <div className=\"text-block-2\">\n            Canada\n            <br />\n            Calgary, AB\n          </div>\n          <a href=\"#intro\" className=\"link\">\n            <i className=\"fab fa-google\" /> michaeldoctoryyc\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import {useEffect} from 'react';\n\nconst useScript = url =>{\n    useEffect(()=>{\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = url;\n        script.async = true;\n\n        document.body.appendChild(script);\n\n        return ()=>{\n            document.body.removeChild(script);\n        }\n    },[url]);\n}\n\nexport default useScript;","import React from 'react';\nconst NavTab = ({ url, text }) => {\n  return (\n    <a href={url} className=\"nav-link hover1\">\n      {text}\n      <br />\n    </a>\n  );\n};\nexport default NavTab;\n","import React from 'react';\nimport NavTab from './NavTab';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <div\n      data-collapse=\"medium\"\n      data-animation=\"default\"\n      data-duration=\"400\"\n      data-w-id=\"2b4fe990-422b-aafa-0844-15043c40d507\"\n      role=\"banner\"\n      className=\"navbar w-nav\"\n    >\n      <div className=\"container w-container\">\n        <Link to=\"/\" className=\"brand hover1 w-nav-brand\">\n          <div className=\"nav-logo\">\n            <i className=\"fas fa-code\" /> MICHAEL DOCTOR\n          </div>\n        </Link>\n        <nav role=\"navigation\" className=\"nav-links w-nav-menu\">\n          <NavTab url=\"/#intro\" text=\"Home\" />\n          <NavTab url=\"/#projects\" text=\"Projects\" />\n          <NavTab url=\"/#blogs\" text=\"Blogs\" />\n          <NavTab url=\"/#about\" text=\"About Me\" />\n          <NavTab url=\"/#intro\" text=\"Contact Me\" />\n        </nav>\n        <div className=\"menu-button hover1 w-nav-button\">\n          <div className=\"icon w-icon-nav-menu\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n"],"sourceRoot":""}