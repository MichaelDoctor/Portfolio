{"version":3,"sources":["components/Blog/BlogMainHeader.js","hooks/newLine.hook.js","components/Blog/BlogComment.js","hooks/useAxios.hook.js","components/Blog/BlogCommentSection.js","components/Blog/BlogWrap.js","components/BlogSections2/Introduction.js","components/BlogSections2/ProjectSetup.js","components/BlogSections2/CoreDataSetup.js","components/BlogSections2/UpdateFunction.js","components/BlogSections2/DeleteFunction.js","components/BlogSections2/Storyboard.js","components/BlogSections2/EditButton.js","components/BlogSections2/DeleteButton.js","components/BlogSections2/GetAll.js","components/BlogSections2/CreateFunction.js","components/BlogSections2/ViewDidLoad.js","components/BlogSections2/TableViewSetup.js","components/BlogSections2/ViewWillAppear.js","components/BlogSections2/AddButton.js","components/BlogSections2/PlayButton.js","components/BlogSections2/Demo.js","components/BlogSections2/TheEnd.js","components/Blog/BlogSections2.js","pages/Blog2.page.js","components/Blog/BlogSection.js","components/Blog/YoutubeWrap.js","components/Footer/Footer.js","hooks/useScript.hook.js","components/Navbar/NavTab.js","components/Navbar/Navbar.js"],"names":["BlogMainHeader","titleMain","titleSub","author","date","className","newLine","text","split","map","str","BlogComment","name","content","useAxios","url","setData","useState","error","setError","loading","setLoading","useEffect","a","axios","get","res","data","resJson","BlogCommentSection","blog","comments","setComments","inputs","setInputs","authorRef","useRef","commentRef","loadingComments","setLoadingComments","csrfmiddlewaretoken","document","getElementsByName","value","baseUrl","handleChange","e","target","createComment","config","headers","body","JSON","stringify","post","then","current","tempComments","length","catch","err","disabled","onSubmit","preventDefault","type","maxLength","placeholder","id","onChange","ref","required","PageLoader","moment","format","BlogWrap","children","Footer","Introduction","BlogSection","title","href","rel","ProjectSetup","style","backgroundImage","CoreDataSetup","YoutubeWrap","link","class","UpdateFunction","DeleteFunction","Storyboard","EditButton","DeleteButton","GetAll","CreateFunction","ViewDidLoad","TableViewSetup","ViewWillAppear","AddButton","PlayButton","Demo","TheEnd","BlogSections","Blog2","useScript","Navbar","paddingTop","src","scrolling","frameBorder","allow","allowFullScreen","data-w-id","removeScript","scripts","getElementsByClassName","Array","from","forEach","elem","removeChild","script","createElement","defer","appendChild","NavTab","data-collapse","data-animation","data-duration","role","to"],"mappings":"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","file":"static/js/6.fc8d9364.chunk.js","sourcesContent":["import React from 'react';\n\nconst BlogMainHeader = ({ titleMain, titleSub, author, date }) => {\n  return (\n    <div className=\"about-header\">\n      <div className=\"section-title\">\n        <h1 className=\"heading blog-heading\">\n          {titleMain} <br />\n          {titleSub}\n        </h1>\n      </div>\n      <div className=\"hr\"></div>\n      <div className=\"about-sub blog-title-sub\">By: {author}</div>\n      <div className=\"about-sub blog-title-sub blog-date\">Created: {date}</div>\n    </div>\n  );\n};\nexport default BlogMainHeader;\n","import React from 'react';\n\nconst newLine = text => {\n  return text.split('\\n').map(str => <p>{str}</p>);\n};\nexport default newLine;\n","import React from 'react';\nimport newLine from '../../hooks/newLine.hook';\n\nconst BlogComment = ({ name, date, content }) => {\n  return (\n    <div className=\"comment\">\n      <div className=\"comment-name\">{name}</div>\n      <div className=\"comment-date\">{date}</div>\n      <div className=\"comment-content\">{newLine(content)}</div>\n    </div>\n  );\n};\nexport default BlogComment;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useAxios = (url, setData) => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await axios.get(url);\n        const resJson = await res.data;\n        setData(resJson);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [url, setData]);\n  return { loading, error };\n};\nexport default useAxios;","import React, { useState, useEffect, useRef } from 'react';\nimport BlogComment from './BlogComment';\nimport DjangoCSRFToken from 'django-react-csrftoken';\nimport axios from 'axios';\nimport useAxios from '../../hooks/useAxios.hook';\nimport PageLoader from '../pageLoader/PageLoader';\nimport moment from 'moment';\n\nconst BlogCommentSection = ({ blog }) => {\n  const [comments, setComments] = useState();\n  const [inputs, setInputs] = useState({});\n  const authorRef = useRef();\n  const commentRef = useRef();\n  const [loadingComments, setLoadingComments] = useState(true);\n  useEffect(() => {\n    setInputs({\n      csrfmiddlewaretoken: document.getElementsByName('csrfmiddlewaretoken')[0]\n        .value,\n    });\n  }, []);\n  useEffect(() => {\n    if (comments) {\n      setLoadingComments(false);\n    }\n  }, [comments]);\n  const baseUrl = 'https://michael-doctor.me';\n  // const baseUrl = 'http://localhost:8000';\n\n  useAxios(`${baseUrl}/api/blog/comment/${blog}/`, setComments);\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setInputs({ ...inputs, [name]: value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let { csrfmiddlewaretoken, author, content } = inputs;\n    if (!author) author = authorRef.current.value;\n    if (!content) content = commentRef.current.value;\n    setInputs({ csrfmiddlewaretoken, author, content });\n    createComment({ csrfmiddlewaretoken, author, content, blog });\n  };\n\n  const createComment = ({ csrfmiddlewaretoken, author, content, blog }) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': csrfmiddlewaretoken,\n      },\n    };\n\n    const body = JSON.stringify({ blog, author, content });\n\n    axios\n      .post(`${baseUrl}/api/blog/create/comment/`, body, config)\n      .then(res => {\n        commentRef.current.value = '';\n        let tempComments = {};\n\n        comments\n          ? (tempComments = {\n              length: comments.length + 1,\n              comments: [res.data, ...comments.comments],\n            })\n          : (tempComments = {\n              length: 1,\n              comments: [res.data],\n            });\n        setComments(tempComments);\n      })\n      .catch(err => {\n        commentRef.current.value =\n          '***** An Error Occured! Try again later 😭*****';\n        authorRef.current.disabled = true;\n        commentRef.current.disabled = true;\n      });\n  };\n  return (\n    <div className=\"comment-section\">\n      <div className=\"hr\" />\n      <div className=\"comment-item comments\">\n        <div className=\"num-com-wrap\">\n          <div className=\"comment-name\">\n            {!loadingComments ? comments.length : 'Loading'} Comment\n            {loadingComments ? 's' : comments.length === 1 ? '' : 's'}\n          </div>\n        </div>\n        <div className=\"comment-form-wrap\">\n          <div className=\"blog-form-block\">\n            <form className=\"blog-form\" onSubmit={handleSubmit}>\n              <DjangoCSRFToken />\n              <input\n                type=\"text\"\n                className=\"blog-text-field w-input\"\n                maxLength=\"100\"\n                name=\"author\"\n                placeholder=\"Name\"\n                id=\"author\"\n                onChange={handleChange}\n                ref={authorRef}\n                required\n              />\n              <textarea\n                name=\"content\"\n                maxLength=\"5000\"\n                id=\"content\"\n                placeholder=\"Type your comments here!\"\n                className=\"blog-text-field blog-text-area w-input\"\n                onChange={handleChange}\n                ref={commentRef}\n                required\n              />\n              <input\n                type=\"submit\"\n                value=\"Comment\"\n                className=\"slider-btn hover1 proj-btn w-button\"\n              />\n            </form>\n          </div>\n        </div>\n        {!loadingComments ? (\n          comments.comments.map(({ id, author, content, date }) => (\n            <BlogComment\n              key={id}\n              name={author}\n              date={moment(date).format('MMMM DD, YYYY')}\n              content={content}\n            />\n          ))\n        ) : (\n          <PageLoader />\n        )}\n      </div>\n    </div>\n  );\n};\nexport default BlogCommentSection;\n","import React from 'react';\nimport Footer from '../Footer/Footer';\nimport BlogCommentSection from './BlogCommentSection';\n\nconst BlogWrap = ({ blog, children }) => {\n  return (\n    <div className=\"content-container\">\n      <div className=\"nav-gap\" />\n      <div className=\"info-content\">\n        <div className=\"about-me-container\">\n          <div className=\"blog-wrap\">{children}</div>\n        </div>\n      </div>\n      <BlogCommentSection blog={blog} />\n      <Footer />\n    </div>\n  );\n};\nexport default BlogWrap;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst Introduction = () => {\n  return (\n    <BlogSection title=\"Introduction\">\n      <div className=\"about-desc blog-content\">\n        What is the meaning of life? Which came first, the chicken or the egg?\n        Does pineapple belong on a pizza? These questions have haunted humanity\n        for centuries. One of the most haunting questions is &quot;What are we\n        going to eat? You decide I&#x27;m fine with anything&quot;. In this\n        world, there are two types of people. Those who always have to pick what\n        to eat and those who do not. Unfortunately, I am someone who always has\n        to decide what we&#x27;re going to eat. In this blog, I will create a\n        solution to this difficult question.\n      </div>\n      <div className=\"about-desc blog-content\">\n        In the last blog, I went over the Swift programming language. This time,\n        we will use what we learned and create an iOS app that will save the\n        food pickers of the world!  This app will allow you to add, edit, and\n        delete food options. With the press of a button, the app will pick one\n        of the food options for you! 👏👏👏 You can find the demo code here:\n      </div>\n      <a\n        href=\"https://github.com/MichaelDoctor/FoodPickerDemo\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Food Pickers vs. the World\n      </a>\n    </BlogSection>\n  );\n};\nexport default Introduction;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst ProjectSetup = () => {\n  return (\n    <BlogSection title=\"Project Setup\">\n      <div className=\"about-desc blog-content\">\n        Let&#x27;s start saving my fellow food pickers:\n      </div>\n      <ol className=\"blog-list\">\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Open Xcode\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;Create a new Xcode Project&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Choose iOS App\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;Next&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Enter &quot;FoodPickerDemo&quot; for the Product Name\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Enable &quot;Use Core Data&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;Next&quot;\n          </div>\n        </li>\n      </ol>\n      <div\n        className=\"blog-img\"\n        style={{\n          backgroundImage: `url(\"https://res.cloudinary.com/hsse18xji/image/upload/v1618178685/portfolio/images/bg/ProjectSetup_nbepys.png\")`,\n        }}\n      ></div>\n      <div className=\"about-desc blog-content\">\n        In the project setup, we enabled Core Data.{' '}\n        <strong className=\"blog-bold\">Core Data</strong> is a framework for\n        connected objects and is not a database. All we need to know\n        for now is that it will allow us to manipulate and keep our data\n        persistent.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default ProjectSetup;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nconst CoreDataSetup = () => {\n  return (\n    <BlogSection title=\"Core Data Setup\">\n      <div className=\"about-desc blog-content\">\n        Now let's set up our Core Data:\n        <br />\n      </div>\n      <ol className=\"blog-list\">\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            In the <strong className=\"blog-bold\">Navigator</strong> (far left\n            window pane) <br />\n            select the &quot;FoodPicker.xcdatamodeld&quot; file\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;Add Entity&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Rename the added entity to &quot;FoodItem&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;Add Attribute&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Enter &quot;name&quot; for the attribute\n            <br />\n            and &quot;String&quot; for the type\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click the &quot;FoodItem&quot; entity\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            In the <strong className=\"blog-bold\">Inspectors</strong> (far right\n            window pane)\n            <br />\n            go to the &quot;Data Model Inspector&quot; tab and change\n            <br />\n            &quot;codegen&quot; to &quot;Manual/None&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            At the very top of the screen\n            <br />\n            Click &quot;Editor&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;Create NSManagedObject subclass&quot; and accept all\n            defaults until 2 files are created\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Drag the 2 new files inside the &quot;FoodPicker&quot; folder\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Select both files, Right-click and click &quot;New Group from\n            Selection&quot;\n          </div>\n        </li>\n      </ol>\n      <YoutubeWrap link=\"https://www.youtube.com/embed/Qr-37gYgjr0\"/>\n      <div className=\"about-desc blog-content\">\n        In our project, all of our code will go into the{' '}\n        <strong className=\"blog-bold\">ViewController.swift</strong> file and\n        another file called{' '}\n        <strong className=\"blog-bold\">DetailViewController.swift</strong>. These\n        controller files manage our UI and functionalities. We will make the\n        following changes to the ViewController.swift file:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">class</strong> ViewController:\n          UITableViewController {'{'}\n          <br />    <strong class=\"code-keyword\">let</strong> context =\n          (UIApplication\n          <br />\n              .shared\n          <br />    .delegate <strong class=\"code-keyword\">as</strong>!\n          AppDelegate)\n          <br />\n              .persistentContainer\n          <br />\n              .viewContext\n          <br />\n              <br />    <strong className=\"code-keyword\">override</strong>{' '}\n          <strong className=\"code-keyword\">func</strong> viewDidLoad() {'{'}\n          <br />        <strong className=\"code-keyword\">super</strong>\n          .viewDidLoad()\n          <br />\n                  title = &quot;Food Picker&quot;\n          <br />    {'}'}\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        We changed the inheritance from{' '}\n        <strong className=\"blog-bold\">UIViewController</strong> to{' '}\n        <strong className=\"blog-bold\">UITableViewController</strong>.\n        UITableViewController allows us to manage a list view, while the\n        UIViewController is a more general view controller. The{' '}\n        <strong className=\"blog-bold\">context</strong> constant is what we will\n        use to access and manipulate our Core Data. Now lets create the\n        DetailViewController.swift:\n        <br />\n      </div>\n      <ol className=\"blog-list\">\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Right-click the &quot;FoodPicker&quot; Folder\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;New File...&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Select &quot;Swift File&quot; and click &quot;Next&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Name the file &quot;DetailViewController&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Click &quot;Create&quot;\n          </div>\n        </li>\n        <li className=\"blog-list-item\">\n          <div className=\"about-desc blog-content blog-content-list\">\n            Copy-paste the contents of <br />\n            &quot;ViewController.swift&quot; file and make these changes:\n          </div>\n        </li>\n      </ol>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">import</strong> UIKit\n          <br />\n          <br />\n          <strong className=\"code-keyword\">class</strong> DetailViewController:\n          UIViewController {'{'}\n          <br />    <strong className=\"code-keyword\">let</strong> context = (\n          <br />\n              UIApplication\n          <br />\n              .shared\n          <br />    .delegate <strong class=\"code-keyword\">as</strong>!\n          AppDelegate)\n          <br />\n              .persistentContainer\n          <br />\n              .viewContext\n          <br />\n          <br />    <strong className=\"code-keyword\">var</strong> item:\n          FoodItem?\n          <br />‍<br />   {' '}\n          <strong className=\"code-keyword\">\n            override func\n          </strong> viewDidLoad() {'{'}\n          <br />        <strong className=\"code-keyword\">super</strong>\n          .viewDidLoad()\n          <br />\n                  title = item?.name!\n          <br />    {'}'}\n          <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        In this app, the ViewController.swift file will be a list of FoodItems.\n        If one of these FoodItems is clicked, the corresponding\n        DetailViewController.swift file will be instantiated. In this view, we\n        will be able to edit or delete the selected FoodItem. The connection\n        between ViewController and the DetailViewController will be shown later.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The FoodItem object will be saved as a property of the\n        DetailViewController. The function{' '}\n        <strong className=\"blog-bold\">viewDidLoad()</strong> is run the very\n        first time that view is instantiated. Inside of this function, we also\n        set the title for the{' '}\n        <strong className=\"blog-bold\">Navigation Controller</strong>. The\n        Navigation Controller allows us to navigate between our different views.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default CoreDataSetup;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst UpdateFunction = () => {\n  return (\n    <BlogSection title=\"Detail View Controller: Update Function\">\n      <div className=\"about-desc blog-content\">\n        We will start working on the DetailViewController.swift file. Let&#x27;s\n        create the function that will be used when the user clicks the edit\n        button. This function can be placed anywhere below the viewDidLoad\n        function:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> updateItem(\n          <br />\n          item: FoodItem, <br />\n          newName: String) {'{'}\n          <br />\n                  item.name = newName\n          <br />        <strong className=\"code-keyword\">do</strong> {'{'}\n          <br />            <strong class=\"code-keyword\">try</strong>{' '}\n          context.save()\n          <br />        {'}'} <strong className=\"code-keyword\">catch</strong> {'{'}\n          <br />\n                      print(&quot;updateItem Error&quot;)\n          <br />        {'}'}\n          <br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        This function is pretty simple. The update function takes the item and the\n        new name of the item as parameters. The name property of the item is\n        updated to the new name. The function then attempts to save the updated\n        item. <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default UpdateFunction;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst DeleteFunction = () => {\n  return (\n    <BlogSection title=\"Detail View Controller: Delete Function\">\n      <div className=\"about-desc blog-content\">\n        Let&#x27;s create the function that will be used when the user clicks\n        the delete button. This function can be placed anywhere below the\n        viewDidLoad function:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> deleteItem(item:\n          FoodItem) {'{'}\n          <br />\n                  context.delete(item)\n          <br />        <strong className=\"code-keyword\">do</strong> {'{'}\n          <br />            <strong class=\"code-keyword\">try</strong>{' '}\n          context.save()\n          <br />        {\n            '}'\n          } <strong className=\"code-keyword\">catch</strong> {'{'}\n          <br />\n                      print(&quot;deleteItem Error&quot;)\n          <br />        {'}'}\n          <br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        This function is also pretty simple. The delete function takes the item\n        as a parameter. The item is deleted using the delete method of our\n        context and attempts to save the context without that item.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default DeleteFunction;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nconst Storyboard = () => {\n  return (\n    <BlogSection title=\"StoryBoard\">\n      <div className=\"about-desc blog-content\">\n        This step relies heavily on the GUI of Xcode. Follow this video to set up\n        our storyboard:\n        <br />\n      </div>\n      <YoutubeWrap link=\"https://www.youtube.com/embed/mXIEjTiOUdI\"/>\n      <div className=\"about-desc blog-content\">\n        In the video, the Navigation Controller,{' '}\n        <strong className=\"blog-bold\">Cell Identifier</strong>,{' '}\n        <strong className=\"blog-bold\">Storyboard ID</strong>, and button code\n        connection are shown.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default Storyboard;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst EditButton = () => {\n  return (\n    <BlogSection title=\"Detail View Controller: Edit Touch Up Inside\">\n      <div className=\"about-desc blog-content\">\n        Our UI is complete and connected to our Controller files. The first file\n        we will work on will be the DetailViewController. This view will be\n        shown when a cell is selected. The Navigation Controller will push this\n        view and show it to the user.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The DetailViewController contains an edit and delete button. These\n        buttons use the touchUpInside event. A{' '}\n        <strong className=\"blog-bold\">touchUpInside</strong> event occurs when\n        &quot;the finger is inside the bounds of the control&quot;. This means\n        that if they are touched up inside, it will trigger an action to occur.\n        All of this simply means that if you click a button 👉, it will either\n        edit or delete the food item. Apple created this event so if the wording\n        sounds weird, blame them 😅. <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        Let&#x27;s work on what happens when someone touches up inside of the\n        edit button. In this app, we will cause an alert to show up when it is\n        touched up. This alert will have a text field, submit, and cancel\n        button. The editPressed function should look like this:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">@IBAction func</strong> editPressed(\n          <strong className=\"code-keyword\">_</strong> sender: UIButton) {'{'}\n          <br />        <strong className=\"code-keyword\">let</strong> alert =\n          UIAlertController(\n          <br />\n                  title: &quot;Edit&quot;, <br />\n                  message: &quot;Update \\(item?.name! ??\n          &quot;item&quot;)&quot;, <br />\n                  preferredStyle: .alert)\n          <br />‍<br />\n                  alert.addTextField(\n          <br />\n                  configurationHandler: nil)\n          <br />\n                  alert.textFields?\n          <br />\n                  .first?.text = item?.name\n          <br />‍<br />\n                  alert.addAction(\n          <br />\n                  UIAlertAction(\n          <br />\n                  title: &quot;Submit&quot;, <br />        style: .default){'{'}\n          <br />            [<strong className=\"code-keyword\">weak self</strong>\n          ] <strong className=\"code-keyword\">_</strong>{' '}\n          <strong className=\"code-keyword\">in</strong>\n          <br />            <strong class=\"code-keyword\">guard let</strong>{' '}\n          field = alert.textFields?.first, <br />           {' '}\n          <strong class=\"code-keyword\">let</strong> newName = field.text, <br />\n                      !newName.isEmpty{' '}\n          <strong className=\"code-keyword\">else</strong> {'{'}{' '}\n          <strong className=\"code-keyword\">return</strong> {'}'}\n          <br />\n                      <br />           {' '}\n          <strong className=\"code-keyword\">self</strong>\n          ?.updateItem(\n          <br />            item: (\n          <strong className=\"code-keyword\">self</strong>\n          ?.item)! , <br />\n                      newName: newName)\n          <br />‍<br />           {' '}\n          <strong className=\"code-keyword\">self</strong>\n          ?.title = newName\n          <br />        {'}'})<br />‍<br />\n                  alert.addAction(\n          <br />\n                  UIAlertAction(\n          <br />\n                  title: &quot;Cancel&quot;, <br />\n                  style: .cancel))\n          <br />\n                  <br />        present(alert, animated:{' '}\n          <strong className=\"code-keyword\">true</strong>)<br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        In the code above, a{' '}\n        <strong className=\"blog-bold\">UIAlertController</strong> object is\n        created and assigned to the constant &quot;alert&quot;. The constructor\n        with the title, message, and preferredStyle is used. On the alert\n        object, we insert a textField into the alert using the{' '}\n        <strong className=\"blog-bold\">.addTextField()</strong>. Since this view\n        is only displayed when a cell is selected, it will already have an\n        initial name. Using alert&#x27;s{' '}\n        <strong className=\"blog-bold\">.textFields.first.text</strong>{' '}\n        properties, we can set the initial value inside the text field to the\n        name of the food item.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The submit and cancel buttons in the alert are added by using the alert\n        object&#x27;s <strong className=\"blog-bold\">.addAction()</strong>{' '}\n        method. This method takes in a UIAlertAction object. If the\n        UIAlertAction has no handler closure (trailing closure in the above\n        code), the button will cause the alert to close when pressed. This was\n        used in the cancel action.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The submit action&#x27;s handler closure starts with{' '}\n        <strong className=\"blog-bold\">[weak self]</strong>. This is stating that\n        the reference to self (DetailViewController) is weak. Without this, the\n        closure could go through a retain cycle and that memory will never be\n        freed up (<strong className=\"blog-bold\">memory leak</strong>). A{' '}\n        <strong className=\"blog-bold\">Retain Cycle</strong> is created if the\n        closure retains self and self is retaining the closure (strongly\n        reference each other), causing an endless cycle.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The <strong className=\"blog-bold\">guard-let statement</strong> is\n        similar to the <strong className=\"blog-bold\">if-let statement</strong>{' '}\n        mentioned in my first blog. They both unwrap optionals if they are not\n        null. In a guard-let statement, if the optional is null, then it will\n        exit the current function, loop, or condition. In this case, we create\n        the field and newName constants. It checks if there is a value in the\n        textField. If it passes the checks, we call the updateItem function and\n        change the title of the view. Lastly, the alert object is presented to\n        the user.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default EditButton;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst DeleteButton = () => {\n  return (\n    <BlogSection title=\"Detail View Controller: Delete Touch Up Inside\">\n      <div className=\"about-desc blog-content\">\n        The delete button will also show an alert if it is touched up inside.\n        After being touched up inside, it will ask for consent to delete the\n        food item from our Core Data:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">@IBAction func</strong>{' '}\n          deletePressed(_ sender: UIButton) {'{'}\n          <br />        <strong className=\"code-keyword\">let</strong> alert =\n          UIAlertController(\n          <br />\n                  title: &quot;Delete&quot;, <br />\n                  message: &quot;Are you sure you want to delete &#x27;\\(\n          item?.name! ?? &quot;item&quot;)&#x27;?&quot;, <br />\n                  preferredStyle: .alert)\n          <br />‍<br />\n                  alert.addAction(\n          <br />\n                  UIAlertAction(\n          <br />\n                  title: &quot;No&quot;, <br />\n                  style: .cancel))\n          <br />‍<br />\n                  alert.addAction(\n          <br />\n                  UIAlertAction(\n          <br />\n                  title: &quot;Yes&quot;, <br />        style: .destructive)\n          {'{'}\n          <br />            [<strong className=\"code-keyword\">weak self</strong>\n          ] <strong className=\"code-keyword\">_ in</strong>\n          <br />‍<br />           {' '}\n          <strong className=\"code-keyword\">self</strong>?\n          <br />            .deleteItem(item: (\n          <strong className=\"code-keyword\">self</strong>?.item)!)\n          <br />‍<br />           {' '}\n          <strong className=\"code-keyword\">self</strong>?\n          <br />\n                      .navigationController?\n          <br />\n                      .popToRootViewController(\n          <br />            animated:{' '}\n          <strong className=\"code-keyword\">true</strong>\n          )\n          <br />        {'}'})<br />        present( alert, animated:{' '}\n          <strong className=\"code-keyword\">true</strong> )<br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        The code is similar to the editPressed function before this. In this\n        function, the deleteItem function is called and the view is returned to\n        the root view controller (ViewController.swift). This code block\n        completes our DetailViewController file.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default DeleteButton;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst GetAll = () => {\n  return (\n    <BlogSection title=\"View Controller: Get All Function\">\n      <div className=\"about-desc blog-content\">\n        Now we will work on the ViewController.swift file. Let&#x27;s create the\n        function that will get all of the context data and reloads the table\n        view when the data is fetched. This function can be placed anywhere\n        below the viewDidLoad function:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> getAllItems() {'{'}\n          <br />        <strong className=\"code-keyword\">do</strong> {'{'}\n          <br />            foods = <strong class=\"code-keyword\">\n            try\n          </strong>{' '}\n          context.fetch( FoodItem.fetchRequest() )<br />           \n          DispatchQueue.main.async {'{'}\n          <br />                <strong className=\"code-keyword\">self</strong>\n          .tableView.reloadData()\n          <br />            {'}'}\n          <br />        {\n            '}'\n          } <strong className=\"code-keyword\">catch</strong> {'{'}\n          <br />\n                      print(&quot;getAllItems error&quot;)\n          <br />        {'}'}\n          <br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        This function attempts to fetch all of the data from the context\n        relating to our FoodItem entity. If the fetch is successful, the data\n        populates our array of FoodItems (shown later in the View Did Load\n        section) and the table view reloads its data. The{' '}\n        <strong className=\"blog-bold\">Dispatch.Queue.main.async</strong> is\n        required because anything related to UI that is not in viewDidLoad must\n        be put into the main thread.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default GetAll;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst CreateFunction = () => {\n  return (\n    <BlogSection title=\"View Controller: Create Function\">\n      <div className=\"about-desc blog-content\">\n        Let&#x27;s create the function that will be used when the user clicks\n        tries to add a new FoodItem. This function can be placed anywhere below\n        the viewDidLoad function:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">func</strong> createItem(name:\n          String) {'{'}\n          <br />        <strong className=\"code-keyword\">let</strong> newItem =\n          FoodItem(context: context)\n          <br />\n                  newItem.name = name\n          <br />        <strong className=\"code-keyword\">do</strong> {'{'}\n          <br />            <strong class=\"code-keyword\">try</strong>{' '}\n          context.save()\n          <br />\n                      getAllItems()\n          <br />        {\n            '}'\n          } <strong className=\"code-keyword\">catch</strong> {'{'}\n          <br />\n                      print(&quot;createItem Error&quot;)\n          <br />        {'}'}\n          <br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        This creates a new item using the context and sets the name of the item\n        to the parameter value. It then tries to save the context. If\n        successful, the getAllItems() function is called to reload the table\n        view.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default CreateFunction;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst ViewDidLoad = () => {\n  return (\n    <BlogSection title=\"View Controller: View Did Load\">\n      <div className=\"about-desc blog-content\">\n        In the View Controller, we will not create buttons to touch up inside.\n        Instead, we will add buttons to the Navigation Controller. We will need\n        to make the following changes to our viewDidLoad function:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">private var</strong> foods =\n          [FoodItem]()\n          <br />\n          <br />\n          <strong className=\"code-keyword\">\n            override func\n          </strong> viewDidLoad() {'{'}\n          <br />        <strong className=\"code-keyword\">super</strong>\n          .viewDidLoad()\n          <br />\n                  title = &quot;Food Picker&quot;\n          <br />‍<br />\n                  navigationItem\n          <br />\n                  .leftBarButtonItem = UIBarButtonItem(\n          <br />\n                  barButtonSystemItem: .add,\n          <br />         target: <strong className=\"code-keyword\">self</strong>,\n          <br />\n                   action: #selector( addTapped ))\n          <br />‍<br />\n                  navigationItem\n          <br />\n                  .rightBarButtonItem = UIBarButtonItem(\n          <br />\n                  barButtonSystemItem: .play,\n          <br />         target: <strong className=\"code-keyword\">self</strong>,\n          <br />\n                   action: #selector(playTapped))\n          <br />‍<br />\n                  getAllItems()\n          <br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        Above our viewDidLoad function, we create an empty array of FoodItems\n        property called &quot;foods&quot;. Inside of the viewDidLoad function,\n        we create add and play buttons on the left and right of the Navigation\n        Controller by setting their respective navigationItem property. These\n        buttons will call <strong className=\"blog-bold\">Objective C</strong>{' '}\n        functions that we have not created yet. Lastly, our getAllItems function\n        is called to load our context data and fill the foods array. Now you may\n        be wondering, &quot;Do we need to know Objective C?!&quot;. Creating an\n        Objective C function is made easily and will be shown later.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default ViewDidLoad;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst TableViewSetup = () => {\n  return (\n    <BlogSection title=\"View Controller: Table View Setup\">\n      <div className=\"about-desc blog-content\">\n        For UITableView to display data, we must set up a few functions.\n        Thankfully, we can let Xcode&#x27;s auto-complete set up the functions\n        for us! In Xcode, type &quot;\n        <strong className=\"blog-bold\">numberOfRowsInSection</strong>&quot; and\n        select the suggestion starting with tableView and add the following:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">override func</strong> tableView(\n          <br />\n          <strong className=\"code-keyword\">_</strong> tableView: UITableView,{' '}\n          <br />\n          numberOfRowsInSection section: Int) -&gt; Int {'{'}\n          <br />        <strong class=\"code-keyword\">return</strong>{' '}\n          foods.count    <br />\n          {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        In this function, we simply need to return the number of items in our\n        FoodItem array. This count is sent from our function to the UITableView\n        to tell it how many rows it needs to have in a section.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        Now we need to populate the cells of our table view with the data in our\n        foods array. This can be done by typing &quot;\n        <strong className=\"blog-bold\">cellForRowAt</strong>&quot; and selecting\n        the suggestion that starts with tableView and add the following:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">override func</strong> tableView(\n          <br />\n          <strong className=\"code-keyword\">_</strong> tableView: UITableView,\n          <br /> cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {'{'}\n          <br />        <strong class=\"code-keyword\">let</strong> cell =\n          tableView\n          <br />\n                  .dequeueReusableCell(\n          <br />\n                  withIdentifier: &quot;Food Cell&quot;, <br />\n                  for: indexPath)\n          <br />‍<br />        <strong className=\"code-keyword\">\n            let\n          </strong>{' '}\n          food = foods[indexPath.row]\n          <br />\n                  cell.textLabel?.text = food.name\n          <br />        <strong className=\"code-keyword\">return</strong> cell\n          <br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        This function puts our data into the cells of our table view. A cell\n        object is created using the{' '}\n        <strong className=\"blog-bold\">.dequeueReusableCell()</strong> method.\n        This requires the <strong className=\"blog-bold\">Cell Identifier</strong>{' '}\n        we set in the Storyboard section and the indexPath.row. The{' '}\n        <strong className=\"blog-bold\">indexPath.row</strong> is the row that the\n        cell will be placed into. This is similar to the specific index of an\n        array and is used to set the name of the cells. The cell is then\n        returned and inserted into a specific place in our table view.\n        <br />\n      </div>\n      <div className=\"about-desc blog-content\">\n        The final function we need to set up our table view is the &quot;\n        <strong className=\"blog-bold\">didSelectRowAt</strong>&quot;:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">override func</strong> tableView(\n          <br />\n          <strong>_</strong> tableView: UITableView, <br />\n          didSelectRowAt indexPath: IndexPath) {'{'}\n          <br />        <strong className=\"code-keyword\">if let</strong>{' '}\n          detailViewController = storyboard?\n          <br />\n                  .instantiateViewController(\n          <br />        identifier: &quot;Food Detail&quot;){' '}\n          <strong className=\"code-keyword\">as</strong>? DetailViewController{' '}\n          {'{'}\n          <br />‍<br />\n                      detailViewController.item = foods[indexPath.row]\n          <br />‍<br />\n                      navigationController?\n          <br />\n                      .pushViewController(\n          <br />\n                      detailViewController, <br />            animated:{' '}\n          <strong className=\"code-keyword\">true</strong>)\n          <br />        {'}'}\n          <br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        This function runs the code inside whenever a cell is selected. The\n        if-let statement instantiates our DetailViewController using the{' '}\n        <strong className=\"blog-bold\">Storyboard ID</strong> that we set in the\n        Storyboard section. If it passes the if-let statement, the item property\n        that we set in our DetailViewController will be sent to the selected cell.\n        After, the navigationController will push the view to the\n        DetailViewController that we created earlier.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default TableViewSetup;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst ViewWillAppear = () => {\n  return (\n    <BlogSection title=\"View Controller: View Will Appear\">\n      <div className=\"about-desc blog-content\">\n        In Xcode, type &quot;\n        <strong className=\"blog-bold\">viewWillAppear</strong>\n        &quot; and select the first suggestion. This function will run whatever\n        is inside every time this view appears. This is needed if there is an\n        update or delete that occurred in the DetailViewController. By calling\n        our getAllItems function, the foods array will be updated and the table\n        view will be reloaded:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n           <strong className=\"code-keyword\">override func</strong>{' '}\n          viewWillAppear(_ animated: Bool) {'{'}\n          <br />\n                  getAllItems()\n          <br />    {'}'}\n        </div>\n      </div>\n    </BlogSection>\n  );\n};\nexport default ViewWillAppear;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst AddButton = () => {\n  return (\n    <BlogSection title=\"View Controller: Add Tapped\">\n      <div className=\"about-desc blog-content\">\n        In this section, we will add functionality to our add button in the\n        Navigation Controller. As stated before, we need to create Objective C\n        functions for those buttons. This sounds intimidating, but has a very\n        simple solution. All we need to do is type &quot;\n        <strong className=\"blog-bold\">@objc</strong>&quot; before our usual\n        function creation:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">@objc func</strong> addTapped() {'{'}\n          <br />        <strong className=\"code-keyword\">let</strong> alert =\n          UIAlertController(\n          <br />\n                  title: &quot;New Food&quot;, <br />\n                  message: &quot;Enter new food choice&quot;, <br />\n                  preferredStyle: .alert)\n          <br />‍<br />\n                  alert.addTextField(\n          <br />        configurationHandler:{' '}\n          <strong className=\"code-keyword\">nil</strong>\n          <br />        )<br />‍<br />\n                  alert.addAction(\n          <br />\n                  UIAlertAction(\n          <br />\n                  title: &quot;Submit&quot;, <br />        style: .default){'{'}\n          <br />            [<strong className=\"code-keyword\">weak self</strong>\n          ] <strong className=\"code-keyword\">_ in</strong>\n          <br />            <strong class=\"code-keyword\">guard let</strong>{' '}\n          field = alert.textFields?.first, <br />           {' '}\n          <strong class=\"code-keyword\">let</strong> text = field.text, <br />   \n                  !text.isEmpty <strong class=\"code-keyword\">else</strong> {'{'}{' '}\n          <strong className=\"code-keyword\">return</strong> {'}'}\n          <br />            <strong class=\"code-keyword\">self</strong>?\n          .createItem( name: text)\n          <br />        {'}'})<br />‍<br />        present( alert, animated:{' '}\n          <strong className=\"code-keyword\">true</strong>)<br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        First, we are creating a UIAlertController object and assigning it to the\n        alert constant. A text field is added to the alert object. A submit\n        button is also created with a handler closure that is similar to the\n        edit button shown earlier. The difference would be that this function is\n        calling the createItem function.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default AddButton;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst PlayButton = () => {\n  return (\n    <BlogSection title=\"View Controller: Play Tapped\">\n      <div className=\"about-desc blog-content\">\n        Finally, we have the play functionality:\n        <br />\n      </div>\n      <div className=\"blog-code\">\n        <div className=\"code\">\n          <strong className=\"code-keyword\">@objc func</strong> playTapped(){' '}\n          {'{'}\n          <br />        <strong className=\"code-keyword\">let</strong> alert:\n          UIAlertController\n          <br />‍<br />        <strong class=\"code-keyword\">if</strong>{' '}\n          foods.count &gt; 0 {'{'}\n          <br />            <strong class=\"code-keyword\">let</strong> food =\n          foods\n          <br />\n                      .randomElement()?\n          <br />\n                      .name\n          <br />‍<br />\n                      alert = UIAlertController(\n          <br />\n                      title: food, <br />\n                      message: &quot;Try eating \\(food!)&quot;, <br />\n                      preferredStyle: .alert)\n          <br />        {\n            '}'\n          } <strong className=\"code-keyword\">else</strong> {'{'}\n          <br />\n                      alert = UIAlertController(\n          <br />\n                      title: &quot;Empty&quot;,\n          <br />\n                      message: &quot;Please add choices before running&quot;,\n          <br />\n                      preferredStyle: .alert)\n          <br />        {'}'}\n          <br />‍<br />\n                  alert.addAction(\n          <br />\n                  UIAlertAction( title: &quot;OK&quot;, style: .default)\n          <br />        )<br />‍<br />        present( alert, animated:{' '}\n          <strong className=\"code-keyword\">true</strong>)<br />    {'}'}\n        </div>\n      </div>\n      <div className=\"about-desc blog-content\">\n        In this function, we have two possible Alert Controllers. The first type\n        would be if we have choices to choose from and the second would be if\n        there were none. If there are choices, we would choose a random element\n        from the FoodItem array and grab its name. With the name of the\n        FoodItem, we would create an alert saving food pickers. If there are no\n        FoodItems in our array, we would tell the user to add a food choice. An\n        ok button is added to the alert to allow the user to dismiss the alert.{' '}\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default PlayButton;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\nimport YoutubeWrap from '../Blog/YoutubeWrap';\n\nconst Demo = () => {\n  return (\n    <BlogSection title=\"Demo\">\n      <div className=\"about-desc blog-content\">\n        Complete Demo Code:\n        <br />\n      </div>\n      <a\n        href=\"https://github.com/MichaelDoctor/FoodPickerDemo\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"blog-link\"\n      >\n        Food Pickers vs. the World\n      </a>\n      <YoutubeWrap link=\"https://www.youtube.com/embed/zsI4A_73ey4\"/>\n    </BlogSection>\n  );\n};\nexport default Demo;\n","import React from 'react';\nimport BlogSection from '../Blog/BlogSection';\n\nconst TheEnd = () => {\n  return (\n    <BlogSection title=\"The End\">\n      <div className=\"about-desc blog-content\">\n        Congratulations! You survived the dry sequel to my Swift Blog. Most of\n        the time sequels aren&#x27;t as entertaining as the original, so this\n        was expected 😅. As you saw, most of the pre-made functions and\n        properties were self-explanatory. Even touchUpInside makes sense once\n        you get over the name. I still have a lot to learn about iOS development\n        but hopefully, I taught you a few things and saved a few Food Pickers\n        with this simple demo.\n        <br />\n      </div>\n    </BlogSection>\n  );\n};\nexport default TheEnd;\n","import React from 'react';\nimport Introduction from '../BlogSections2/Introduction';\nimport ProjectSetup from '../BlogSections2/ProjectSetup';\nimport CoreDataSetup from '../BlogSections2/CoreDataSetup';\nimport UpdateFunction from '../BlogSections2/UpdateFunction';\nimport DeleteFunction from '../BlogSections2/DeleteFunction';\nimport Storyboard from '../BlogSections2/Storyboard';\nimport EditButton from '../BlogSections2/EditButton';\nimport DeleteButton from '../BlogSections2/DeleteButton';\nimport GetAll from '../BlogSections2/GetAll';\nimport CreateFunction from '../BlogSections2/CreateFunction';\nimport ViewDidLoad from '../BlogSections2/ViewDidLoad';\nimport TableViewSetup from '../BlogSections2/TableViewSetup';\nimport ViewWillAppear from '../BlogSections2/ViewWillAppear';\nimport AddButton from '../BlogSections2/AddButton';\nimport PlayButton from '../BlogSections2/PlayButton';\nimport Demo from '../BlogSections2/Demo';\nimport TheEnd from '../BlogSections2/TheEnd';\n\nconst BlogSections = () => {\n  return (\n    <div className=\"section-desc\">\n      <Introduction />\n      <ProjectSetup /> \n      <CoreDataSetup />\n      <UpdateFunction />\n      <DeleteFunction />\n      <Storyboard />\n      <EditButton />\n      <DeleteButton />\n      <GetAll />\n      <CreateFunction />\n      <ViewDidLoad />\n      <TableViewSetup />\n      <ViewWillAppear />\n      <AddButton />\n      <PlayButton />\n      <Demo />\n      <TheEnd />\n    </div>\n  );\n};\nexport default BlogSections;\n","import React from 'react';\nimport BlogMainHeader from '../components/Blog/BlogMainHeader';\nimport BlogSections from '../components/Blog/BlogSections2';\nimport BlogWrap from '../components/Blog/BlogWrap';\nimport Navbar from '../components/Navbar/Navbar';\nimport useScript from '../hooks/useScript.hook';\n\nconst Blog2 = () => {\n  useScript(\n    'https://res.cloudinary.com/hsse18xji/raw/upload/v1606877900/portfolio/js/jquery_xpecxx.js',\n  );\n  useScript(\n    'https://res.cloudinary.com/hsse18xji/raw/upload/v1607053094/portfolio/js/webflow.animation_skydrw.js',\n  );\n  return (\n    <div className=\"container\">\n      <Navbar />\n      <BlogWrap blog={2}>\n        <BlogMainHeader\n          titleMain=\"Swift Blog Part 2:\"\n          titleSub=\"The Demo\"\n          author=\"Michael Doctor\"\n          date=\"April 10, 2021\"\n        />\n        <BlogSections />\n      </BlogWrap>\n    </div>\n  );\n};\nexport default Blog2;\n","import React from 'react';\n\nconst BlogSection = ({ title, children }) => {\n  return (\n    <div className=\"blog-section\">\n      <div className=\"blog-head-wrap\">\n        <h1 className=\"blog-header\" id={title}>{title}</h1>\n      </div>\n      {children}\n    </div>\n  );\n};\nexport default BlogSection;\n","import React from 'react';\n\nconst YoutubeWrap = ({link}) => {\n  return (\n    <div className=\"vid-wrapper\">\n      <div\n        style={{ paddingTop: '56.17021276595745%' }}\n        className=\"blog-vid w-video w-embed\"\n      >\n        <iframe\n          className=\"embedly-embed\"\n          src={link}\n          scrolling=\"no\"\n          title=\"YouTube embed\"\n          frameBorder=\"0\"\n          allow=\"autoplay; fullscreen\"\n          allowFullScreen={true}\n        ></iframe>\n      </div>\n    </div>\n  );\n};\nexport default YoutubeWrap;\n","import React from 'react';\nconst Footer = () => {\n  return (\n    <div\n      data-w-id=\"f50d5e09-e817-9552-6d28-c27f47cc01b0\"\n      className=\"footer opacity-scroll\"\n    >\n      <div className=\"hr\"></div>\n      <div className=\"footer-container\" id=\"footer\">\n        <div className=\"footer-info\">\n          <h5 className=\"footer-header\">Michael Doctor&#x27;s Portfolio</h5>\n          <div className=\"footer-desc\">\n            My personal website portfolio was made with React, Django,\n            PostgreSQL, and Webflow.\n          </div>\n        </div>\n        <div className=\"footer-links\">\n          <h5 className=\"footer-header\">Links</h5>\n          <a\n            href=\"https://github.com/MichaelDoctor\"\n            className=\"link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-github\" /> Github\n          </a>\n          <a\n            href=\"https://www.linkedin.com/in/michaeldoctor/\"\n            className=\"link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-linkedin\" /> LinkedIn\n          </a>\n        </div>\n        <div className=\"footer-contact\">\n          <h5 className=\"footer-header\">Contact Info</h5>\n          <h6 className=\"footer-name\">Michael Doctor</h6>\n          <div className=\"text-block-2\">\n            Canada\n            <br />\n            Calgary, AB\n          </div>\n          <a href=\"#intro\" className=\"link\">\n            <i className=\"fab fa-google\" /> michaeldoctoryyc\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","// import node_modules\nimport { useEffect } from 'react';\n\n/**\n * This function loads a script tag into the body. Used for hamburger menu, drop down, and slider functionalities\n * @param url of external script\n */\nconst useScript = url => {\n  // useEffect is called whenever the component is mounted\n  useEffect(() => {\n    // calls removeScript function\n    removeScript(url);\n\n    // This creates a script element\n    const script = document.createElement('script');\n    // set properties for script tag\n    script.type = 'text/javascript';\n    script.className = 'useScript';\n    script.src = url;\n    // used to ensure sequential script loading\n    script.defer = true;\n\n    // add to bottom of body\n    document.body.appendChild(script);\n\n    // called when the component dismounts\n    return () => {\n      removeScript(url);\n    };\n  }, [url]);\n};\n\n/**\n * This function removes the script from the document if it is already in the body.\n * @param url of script\n */\nconst removeScript = url => {\n  // gets all the scripts with the className = useScript\n  const scripts = document.getElementsByClassName('useScript');\n\n  // for each element in the scripts constant, remove the script if it already exists in the array\n  Array.from(scripts).forEach(elem => {\n    if (elem.src === url) {\n      document.body.removeChild(elem);\n    }\n  });\n};\n\n// default export\nexport default useScript;\n\n\n\n\n\n\n\n\n\n\n// import {useEffect} from 'react';\n\n// const useScript = url =>{\n//     useEffect(()=>{\n//         const script = document.createElement(\"script\");\n//         script.type = \"text/javascript\";\n//         script.src = url;\n//         script.async = true;\n\n//         document.body.appendChild(script);\n\n//         return ()=>{\n//             document.body.removeChild(script);\n//         }\n//     },[url]);\n// }\n\n// export default useScript;","import React from 'react';\nconst NavTab = ({ url, text }) => {\n  return (\n    <a href={url} className=\"nav-link hover1\">\n      {text}\n      <br />\n    </a>\n  );\n};\nexport default NavTab;\n","import React from 'react';\nimport NavTab from './NavTab';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <div\n      data-collapse=\"medium\"\n      data-animation=\"default\"\n      data-duration=\"400\"\n      data-w-id=\"2b4fe990-422b-aafa-0844-15043c40d507\"\n      role=\"banner\"\n      className=\"navbar w-nav\"\n    >\n      <div className=\"container w-container\">\n        <Link to=\"/\" className=\"brand hover1 w-nav-brand\">\n          <div className=\"nav-logo\">\n            <i className=\"fas fa-code\" /> MICHAEL DOCTOR\n          </div>\n        </Link>\n        <nav role=\"navigation\" className=\"nav-links w-nav-menu\">\n          <NavTab url=\"/#intro\" text=\"Home\" />\n          <NavTab url=\"/#projects\" text=\"Projects\" />\n          <NavTab url=\"/#blogs\" text=\"Blogs\" />\n          <NavTab url=\"/#about\" text=\"About Me\" />\n          <NavTab url=\"/#intro\" text=\"Contact Me\" />\n        </nav>\n        <div className=\"menu-button hover1 w-nav-button\">\n          <div className=\"icon w-icon-nav-menu\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n"],"sourceRoot":""}