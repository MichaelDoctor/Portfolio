(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[6],{103:function(e,t,s){"use strict";var c=s(5);s(0);t.a=function(e){var t=e.titleMain,s=e.titleSub,o=e.author,l=e.date;return Object(c.jsxs)("div",{className:"about-header",children:[Object(c.jsx)("div",{className:"section-title",children:Object(c.jsxs)("h1",{className:"heading blog-heading",children:[t," ",Object(c.jsx)("br",{}),s]})}),Object(c.jsx)("div",{className:"hr"}),Object(c.jsxs)("div",{className:"about-sub blog-title-sub",children:["By: ",o]}),Object(c.jsxs)("div",{className:"about-sub blog-title-sub blog-date",children:["Created: ",l]})]})}},104:function(e,t,s){"use strict";var c=s(5),o=s(0),l=s(70),n=s(128),r=s(81),a=s(85),i=s(65),b=function(e){return e.split("\n").map((function(e){return Object(c.jsx)("p",{children:e})}))},d=function(e){var t=e.name,s=e.date,o=e.content;return Object(c.jsxs)("div",{className:"comment",children:[Object(c.jsx)("div",{className:"comment-name",children:t}),Object(c.jsx)("div",{className:"comment-date",children:s}),Object(c.jsx)("div",{className:"comment-content",children:b(o)})]})},j=s(86),h=s.n(j),x=s(80),m=s.n(x),O=s(101),u=s.n(O),g=s(102),w=function(e,t){var s=Object(o.useState)(null),c=Object(i.a)(s,2),l=c[0],n=c[1],r=Object(o.useState)(!0),a=Object(i.a)(r,2),b=a[0],d=a[1];return Object(o.useEffect)((function(){Object(g.a)(u.a.mark((function s(){var c,o;return u.a.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.prev=0,s.next=3,m.a.get(e);case 3:return c=s.sent,s.next=6,c.data;case 6:o=s.sent,t(o),s.next=13;break;case 10:s.prev=10,s.t0=s.catch(0),n(s.t0);case 13:return s.prev=13,d(!1),s.finish(13);case 16:case"end":return s.stop()}}),s,null,[[0,10,13,16]])})))()}),[e,t]),{loading:b,error:l}},f=s(16),N=s(127),v=s.n(N),p=function(e){var t=e.blog,s=Object(o.useState)(),l=Object(i.a)(s,2),b=l[0],j=l[1],x=Object(o.useState)({}),O=Object(i.a)(x,2),u=O[0],g=O[1],N=Object(o.useRef)(),p=Object(o.useRef)(),y=Object(o.useState)(!0),k=Object(i.a)(y,2),I=k[0],C=k[1];Object(o.useEffect)((function(){g({csrfmiddlewaretoken:document.getElementsByName("csrfmiddlewaretoken")[0].value})}),[]),Object(o.useEffect)((function(){b&&C(!1)}),[b]);var T="https://michael-doctor.me";w("".concat(T,"/api/blog/comment/").concat(t,"/"),j);var A=function(e){var t=e.target,s=t.name,c=t.value;g(Object(a.a)(Object(a.a)({},u),{},Object(r.a)({},s,c)))},D=function(e){var t=e.csrfmiddlewaretoken,s=e.author,c=e.content,o=e.blog,l={headers:{"Content-Type":"application/json","X-CSRFTOKEN":t}},r=JSON.stringify({blog:o,author:s,content:c});m.a.post("".concat(T,"/api/blog/create/comment/"),r,l).then((function(e){p.current.value="";var t={};t=b?{length:b.length+1,comments:[e.data].concat(Object(n.a)(b.comments))}:{length:1,comments:[e.data]},j(t)})).catch((function(e){p.current.value="***** An Error Occured! Try again later \ud83d\ude2d*****",N.current.disabled=!0,p.current.disabled=!0}))};return Object(c.jsxs)("div",{className:"comment-section",children:[Object(c.jsx)("div",{className:"hr"}),Object(c.jsxs)("div",{className:"comment-item comments",children:[Object(c.jsx)("div",{className:"num-com-wrap",children:Object(c.jsxs)("div",{className:"comment-name",children:[I?"Loading":b.length," Comment",I?"s":1===b.length?"":"s"]})}),Object(c.jsx)("div",{className:"comment-form-wrap",children:Object(c.jsx)("div",{className:"blog-form-block",children:Object(c.jsxs)("form",{className:"blog-form",onSubmit:function(e){e.preventDefault();var s=u.csrfmiddlewaretoken,c=u.author,o=u.content;c||(c=N.current.value),o||(o=p.current.value),g({csrfmiddlewaretoken:s,author:c,content:o}),D({csrfmiddlewaretoken:s,author:c,content:o,blog:t})},children:[Object(c.jsx)(h.a,{}),Object(c.jsx)("input",{type:"text",className:"blog-text-field w-input",maxLength:"100",name:"author",placeholder:"Name",id:"author",onChange:A,ref:N,required:!0}),Object(c.jsx)("textarea",{name:"content",maxLength:"5000",id:"content",placeholder:"Type your comments here!",className:"blog-text-field blog-text-area w-input",onChange:A,ref:p,required:!0}),Object(c.jsx)("input",{type:"submit",value:"Comment",className:"slider-btn hover1 proj-btn w-button"})]})})}),I?Object(c.jsx)(f.a,{}):b.comments.map((function(e){var t=e.id,s=e.author,o=e.content,l=e.date;return Object(c.jsx)(d,{name:s,date:v()(l).format("MMMM DD, YYYY"),content:o},t)}))]})]})};t.a=function(e){var t=e.blog,s=e.children;return Object(c.jsxs)("div",{className:"content-container",children:[Object(c.jsx)("div",{className:"nav-gap"}),Object(c.jsx)("div",{className:"info-content",children:Object(c.jsx)("div",{className:"about-me-container",children:Object(c.jsx)("div",{className:"blog-wrap",children:s})})}),Object(c.jsx)(p,{blog:t}),Object(c.jsx)(l.a,{})]})}},199:function(e,t,s){"use strict";s.r(t);var c=s(5),o=(s(0),s(103)),l=s(61),n=function(){return Object(c.jsxs)(l.a,{title:"Introduction",children:[Object(c.jsx)("div",{className:"about-desc blog-content",children:"What is the meaning of life? Which came first, the chicken or the egg? Does pineapple belong on a pizza? These questions have haunted humanity for centuries. One of the most haunting questions is \"What are we going to eat? You decide I'm fine with anything\". In this world, there are two types of people. Those who always have to pick what to eat and those who do not. Unfortunately, I am someone who always has to decide what we're going to eat. In this blog, I will create a solution to this difficult question."}),Object(c.jsx)("div",{className:"about-desc blog-content",children:"In the last blog, I went over the Swift programming language. This time, we will use what we learned and create an iOS app that will save the food pickers of the world! \xa0This app will allow you to add, edit, and delete food options. With the press of a button, the app will pick one of the food options for you! \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f You can find the demo code here:"}),Object(c.jsx)("a",{href:"https://github.com/MichaelDoctor/FoodPickerDemo",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Food Pickers vs. the World"})]})},r=function(){return Object(c.jsxs)(l.a,{title:"Project Setup",children:[Object(c.jsx)("div",{className:"about-desc blog-content",children:"Let's start saving my fellow food pickers:"}),Object(c.jsxs)("ol",{className:"blog-list",children:[Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Open Xcode"})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "Create a new Xcode Project"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:"Choose iOS App"})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "Next"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Enter "FoodPickerDemo" for the Product Name'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Enable "Use Core Data"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "Next"'})})]}),Object(c.jsx)("div",{className:"blog-img",style:{backgroundImage:'url("https://res.cloudinary.com/hsse18xji/image/upload/v1618178685/portfolio/images/bg/ProjectSetup_nbepys.png")'}}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In the project setup, we enabled Core Data."," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Core Data"})," is a framework for connected objects and is not a database. All we need to know for now is that it will allow us to manipulate and keep our data persistent.",Object(c.jsx)("br",{})]})]})},a=s(64),i=function(){return Object(c.jsxs)(l.a,{title:"Core Data Setup",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Now let's set up our Core Data:",Object(c.jsx)("br",{})]}),Object(c.jsxs)("ol",{className:"blog-list",children:[Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsxs)("div",{className:"about-desc blog-content blog-content-list",children:["In the ",Object(c.jsx)("strong",{className:"blog-bold",children:"Navigator"})," (far left window pane) ",Object(c.jsx)("br",{}),'select the "FoodPicker.xcdatamodeld" file']})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "Add Entity"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Rename the added entity to "FoodItem"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "Add Attribute"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsxs)("div",{className:"about-desc blog-content blog-content-list",children:['Enter "name" for the attribute',Object(c.jsx)("br",{}),'and "String" for the type']})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click the "FoodItem" entity'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsxs)("div",{className:"about-desc blog-content blog-content-list",children:["In the ",Object(c.jsx)("strong",{className:"blog-bold",children:"Inspectors"})," (far right window pane)",Object(c.jsx)("br",{}),'go to the "Data Model Inspector" tab and change',Object(c.jsx)("br",{}),'"codegen" to "Manual/None"']})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsxs)("div",{className:"about-desc blog-content blog-content-list",children:["At the very top of the screen",Object(c.jsx)("br",{}),'Click "Editor"']})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "Create NSManagedObject subclass" and accept all defaults until 2 files are created'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Drag the 2 new files inside the "FoodPicker" folder'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Select both files, Right-click and click "New Group from Selection"'})})]}),Object(c.jsx)(a.a,{link:"https://www.youtube.com/embed/Qr-37gYgjr0"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In our project, all of our code will go into the"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"ViewController.swift"})," file and another file called"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"DetailViewController.swift"}),". These controller files manage our UI and functionalities. We will make the following changes to the ViewController.swift file:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"class"})," ViewController: UITableViewController ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"let"})," context = (UIApplication",Object(c.jsx)("br",{}),"\xa0 \xa0 .shared",Object(c.jsx)("br",{}),"\xa0 \xa0 .delegate ",Object(c.jsx)("strong",{class:"code-keyword",children:"as"}),"! AppDelegate)",Object(c.jsx)("br",{}),"\xa0 \xa0 .persistentContainer",Object(c.jsx)("br",{}),"\xa0 \xa0 .viewContext",Object(c.jsx)("br",{}),"\xa0\xa0 \xa0",Object(c.jsx)("br",{}),"\xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"override"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," viewDidLoad() ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"super"}),".viewDidLoad()",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title = "Food Picker"',Object(c.jsx)("br",{}),"\xa0 \xa0 ","}",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["We changed the inheritance from"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"UIViewController"})," to"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"UITableViewController"}),". UITableViewController allows us to manage a list view, while the UIViewController is a more general view controller. The"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"context"})," constant is what we will use to access and manipulate our Core Data. Now lets create the DetailViewController.swift:",Object(c.jsx)("br",{})]}),Object(c.jsxs)("ol",{className:"blog-list",children:[Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Right-click the "FoodPicker" Folder'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "New File..."'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Select "Swift File" and click "Next"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Name the file "DetailViewController"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsx)("div",{className:"about-desc blog-content blog-content-list",children:'Click "Create"'})}),Object(c.jsx)("li",{className:"blog-list-item",children:Object(c.jsxs)("div",{className:"about-desc blog-content blog-content-list",children:["Copy-paste the contents of ",Object(c.jsx)("br",{}),'"ViewController.swift" file and make these changes:']})})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"import"})," UIKit",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:"class"})," DetailViewController: UIViewController ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," context = (",Object(c.jsx)("br",{}),"\xa0 \xa0 UIApplication",Object(c.jsx)("br",{}),"\xa0 \xa0 .shared",Object(c.jsx)("br",{}),"\xa0 \xa0 .delegate ",Object(c.jsx)("strong",{class:"code-keyword",children:"as"}),"! AppDelegate)",Object(c.jsx)("br",{}),"\xa0 \xa0 .persistentContainer",Object(c.jsx)("br",{}),"\xa0 \xa0 .viewContext",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"\xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"var"})," item: FoodItem?",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"override func"})," viewDidLoad() ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"super"}),".viewDidLoad()",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 title = item?.name!",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In this app, the ViewController.swift file will be a list of FoodItems. If one of these FoodItems is clicked, the corresponding DetailViewController.swift file will be instantiated. In this view, we will be able to edit or delete the selected FoodItem. The connection between ViewController and the DetailViewController will be shown later.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The FoodItem object will be saved as a property of the DetailViewController. The function"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"viewDidLoad()"})," is run the very first time that view is instantiated. Inside of this function, we also set the title for the"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Navigation Controller"}),". The Navigation Controller allows us to navigate between our different views.",Object(c.jsx)("br",{})]})]})},b=function(){return Object(c.jsxs)(l.a,{title:"Detail View Controller: Update Function",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["We will start working on the DetailViewController.swift file. Let's create the function that will be used when the user clicks the edit button. This function can be placed anywhere below the viewDidLoad function:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," updateItem(",Object(c.jsx)("br",{}),"item: FoodItem, ",Object(c.jsx)("br",{}),"newName: String) ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 item.name = newName",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"do"})," ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"try"})," ","context.save()",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"catch"})," ","{",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 print("updateItem Error")',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["This function is pretty simple. The update function takes the item and the new name of the item as parameters. The name property of the item is updated to the new name. The function then attempts to save the updated item. ",Object(c.jsx)("br",{})]})]})},d=function(){return Object(c.jsxs)(l.a,{title:"Detail View Controller: Delete Function",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Let's create the function that will be used when the user clicks the delete button. This function can be placed anywhere below the viewDidLoad function:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," deleteItem(item: FoodItem) ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 context.delete(item)",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"do"})," ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"try"})," ","context.save()",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"catch"})," ","{",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 print("deleteItem Error")',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["This function is also pretty simple. The delete function takes the item as a parameter. The item is deleted using the delete method of our context and attempts to save the context without that item.",Object(c.jsx)("br",{})]})]})},j=function(){return Object(c.jsxs)(l.a,{title:"StoryBoard",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["This step relies heavily on the GUI of Xcode. Follow this video to set up our storyboard:",Object(c.jsx)("br",{})]}),Object(c.jsx)(a.a,{link:"https://www.youtube.com/embed/mXIEjTiOUdI"}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In the video, the Navigation Controller,"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Cell Identifier"}),","," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Storyboard ID"}),", and button code connection are shown.",Object(c.jsx)("br",{})]})]})},h=function(){return Object(c.jsxs)(l.a,{title:"Detail View Controller: Edit Touch Up Inside",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Our UI is complete and connected to our Controller files. The first file we will work on will be the DetailViewController. This view will be shown when a cell is selected. The Navigation Controller will push this view and show it to the user.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The DetailViewController contains an edit and delete button. These buttons use the touchUpInside event. A"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"touchUpInside"}),' event occurs when "the finger is inside the bounds of the control". This means that if they are touched up inside, it will trigger an action to occur. All of this simply means that if you click a button \ud83d\udc49, it will either edit or delete the food item. Apple created this event so if the wording sounds weird, blame them \ud83d\ude05. ',Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Let's work on what happens when someone touches up inside of the edit button. In this app, we will cause an alert to show up when it is touched up. This alert will have a text field, submit, and cancel button. The editPressed function should look like this:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"@IBAction func"})," editPressed(",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," sender: UIButton) ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," alert = UIAlertController(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "Edit", ',Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 message: "Update \\(item?.name! ?? "item")", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 preferredStyle: .alert)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addTextField(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 configurationHandler: nil)",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.textFields?",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 .first?.text = item?.name",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addAction(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 UIAlertAction(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "Submit", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 style: .default)","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 [",Object(c.jsx)("strong",{className:"code-keyword",children:"weak self"}),"] ",Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," ",Object(c.jsx)("strong",{className:"code-keyword",children:"in"}),Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"guard let"})," ","field = alert.textFields?.first, ",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0"," ",Object(c.jsx)("strong",{class:"code-keyword",children:"let"})," newName = field.text, ",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 !newName.isEmpty"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"else"})," ","{"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ","}",Object(c.jsx)("br",{}),"\xa0\xa0 \xa0 \xa0 \xa0 \xa0 \xa0",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),"?.updateItem(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 item: (",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),"?.item)! , ",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 newName: newName)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),"?.title = newName",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",")",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addAction(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 UIAlertAction(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "Cancel", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 style: .cancel))",Object(c.jsx)("br",{}),"\xa0\xa0 \xa0 \xa0 \xa0",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 present(alert, animated:"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"}),")",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In the code above, a"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"UIAlertController"}),' object is created and assigned to the constant "alert". The constructor with the title, message, and preferredStyle is used. On the alert object, we insert a textField into the alert using the'," ",Object(c.jsx)("strong",{className:"blog-bold",children:".addTextField()"}),". Since this view is only displayed when a cell is selected, it will already have an initial name. Using alert's"," ",Object(c.jsx)("strong",{className:"blog-bold",children:".textFields.first.text"})," ","properties, we can set the initial value inside the text field to the name of the food item.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The submit and cancel buttons in the alert are added by using the alert object's ",Object(c.jsx)("strong",{className:"blog-bold",children:".addAction()"})," ","method. This method takes in a UIAlertAction object. If the UIAlertAction has no handler closure (trailing closure in the above code), the button will cause the alert to close when pressed. This was used in the cancel action.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The submit action's handler closure starts with"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"[weak self]"}),". This is stating that the reference to self (DetailViewController) is weak. Without this, the closure could go through a retain cycle and that memory will never be freed up (",Object(c.jsx)("strong",{className:"blog-bold",children:"memory leak"}),"). A"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Retain Cycle"})," is created if the closure retains self and self is retaining the closure (strongly reference each other), causing an endless cycle.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The ",Object(c.jsx)("strong",{className:"blog-bold",children:"guard-let statement"})," is similar to the ",Object(c.jsx)("strong",{className:"blog-bold",children:"if-let statement"})," ","mentioned in my first blog. They both unwrap optionals if they are not null. In a guard-let statement, if the optional is null, then it will exit the current function, loop, or condition. In this case, we create the field and newName constants. It checks if there is a value in the textField. If it passes the checks, we call the updateItem function and change the title of the view. Lastly, the alert object is presented to the user.",Object(c.jsx)("br",{})]})]})},x=function(){return Object(c.jsxs)(l.a,{title:"Detail View Controller: Delete Touch Up Inside",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The delete button will also show an alert if it is touched up inside. After being touched up inside, it will ask for consent to delete the food item from our Core Data:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"@IBAction func"})," ","deletePressed(_ sender: UIButton) ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," alert = UIAlertController(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "Delete", ',Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 message: "Are you sure you want to delete \'\\( item?.name! ?? "item")\'?", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 preferredStyle: .alert)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addAction(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 UIAlertAction(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "No", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 style: .cancel))",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addAction(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 UIAlertAction(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "Yes", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 style: .destructive)","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 [",Object(c.jsx)("strong",{className:"code-keyword",children:"weak self"}),"] ",Object(c.jsx)("strong",{className:"code-keyword",children:"_ in"}),Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),"?",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 .deleteItem(item: (",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),"?.item)!)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),"?",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 .navigationController?",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 .popToRootViewController(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 animated:"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"}),")",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",")",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 present( alert, animated:"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"})," )",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["The code is similar to the editPressed function before this. In this function, the deleteItem function is called and the view is returned to the root view controller (ViewController.swift). This code block completes our DetailViewController file.",Object(c.jsx)("br",{})]})]})},m=function(){return Object(c.jsxs)(l.a,{title:"View Controller: Get All Function",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Now we will work on the ViewController.swift file. Let's create the function that will get all of the context data and reloads the table view when the data is fetched. This function can be placed anywhere below the viewDidLoad function:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," getAllItems() ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"do"})," ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 foods = ",Object(c.jsx)("strong",{class:"code-keyword",children:"try"})," ","context.fetch( FoodItem.fetchRequest() )",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 DispatchQueue.main.async ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),".tableView.reloadData()",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ","}",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"catch"})," ","{",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 print("getAllItems error")',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["This function attempts to fetch all of the data from the context relating to our FoodItem entity. If the fetch is successful, the data populates our array of FoodItems (shown later in the View Did Load section) and the table view reloads its data. The"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Dispatch.Queue.main.async"})," is required because anything related to UI that is not in viewDidLoad must be put into the main thread.",Object(c.jsx)("br",{})]})]})},O=function(){return Object(c.jsxs)(l.a,{title:"View Controller: Create Function",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Let's create the function that will be used when the user clicks tries to add a new FoodItem. This function can be placed anywhere below the viewDidLoad function:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"func"})," createItem(name: String) ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," newItem = FoodItem(context: context)",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 newItem.name = name",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"do"})," ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"try"})," ","context.save()",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 getAllItems()",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"catch"})," ","{",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 print("createItem Error")',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["This creates a new item using the context and sets the name of the item to the parameter value. It then tries to save the context. If successful, the getAllItems() function is called to reload the table view.",Object(c.jsx)("br",{})]})]})},u=function(){return Object(c.jsxs)(l.a,{title:"View Controller: View Did Load",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In the View Controller, we will not create buttons to touch up inside. Instead, we will add buttons to the Navigation Controller. We will need to make the following changes to our viewDidLoad function:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"private var"})," foods = [FoodItem]()",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:"override func"})," viewDidLoad() ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"super"}),".viewDidLoad()",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title = "Food Picker"',Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 navigationItem",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 .leftBarButtonItem = UIBarButtonItem(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 barButtonSystemItem: .add,",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0target: ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),",",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0action: #selector( addTapped ))",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 navigationItem",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 .rightBarButtonItem = UIBarButtonItem(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 barButtonSystemItem: .play,",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0target: ",Object(c.jsx)("strong",{className:"code-keyword",children:"self"}),",",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0action: #selector(playTapped))",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 getAllItems()",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['Above our viewDidLoad function, we create an empty array of FoodItems property called "foods". Inside of the viewDidLoad function, we create add and play buttons on the left and right of the Navigation Controller by setting their respective navigationItem property. These buttons will call ',Object(c.jsx)("strong",{className:"blog-bold",children:"Objective C"})," ",'functions that we have not created yet. Lastly, our getAllItems function is called to load our context data and fill the foods array. Now you may be wondering, "Do we need to know Objective C?!". Creating an Objective C function is made easily and will be shown later.',Object(c.jsx)("br",{})]})]})},g=function(){return Object(c.jsxs)(l.a,{title:"View Controller: Table View Setup",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["For UITableView to display data, we must set up a few functions. Thankfully, we can let Xcode's auto-complete set up the functions for us! In Xcode, type \"",Object(c.jsx)("strong",{className:"blog-bold",children:"numberOfRowsInSection"}),'" and select the suggestion starting with tableView and add the following:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"override func"})," tableView(",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," tableView: UITableView,"," ",Object(c.jsx)("br",{}),"numberOfRowsInSection section: Int) -> Int ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"return"})," ","foods.count\xa0 \xa0 ",Object(c.jsx)("br",{}),"}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In this function, we simply need to return the number of items in our FoodItem array. This count is sent from our function to the UITableView to tell it how many rows it needs to have in a section.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['Now we need to populate the cells of our table view with the data in our foods array. This can be done by typing "',Object(c.jsx)("strong",{className:"blog-bold",children:"cellForRowAt"}),'" and selecting the suggestion that starts with tableView and add the following:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"override func"})," tableView(",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{className:"code-keyword",children:"_"})," tableView: UITableView,",Object(c.jsx)("br",{})," cellForRowAt indexPath: IndexPath) -> UITableViewCell ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"let"})," cell = tableView",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 .dequeueReusableCell(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 withIdentifier: "Food Cell", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 for: indexPath)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," ","food = foods[indexPath.row]",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 cell.textLabel?.text = food.name",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," cell",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["This function puts our data into the cells of our table view. A cell object is created using the"," ",Object(c.jsx)("strong",{className:"blog-bold",children:".dequeueReusableCell()"})," method. This requires the ",Object(c.jsx)("strong",{className:"blog-bold",children:"Cell Identifier"})," ","we set in the Storyboard section and the indexPath.row. The"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"indexPath.row"})," is the row that the cell will be placed into. This is similar to the specific index of an array and is used to set the name of the cells. The cell is then returned and inserted into a specific place in our table view.",Object(c.jsx)("br",{})]}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:['The final function we need to set up our table view is the "',Object(c.jsx)("strong",{className:"blog-bold",children:"didSelectRowAt"}),'":',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"override func"})," tableView(",Object(c.jsx)("br",{}),Object(c.jsx)("strong",{children:"_"})," tableView: UITableView, ",Object(c.jsx)("br",{}),"didSelectRowAt indexPath: IndexPath) ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"if let"})," ","detailViewController = storyboard?",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 .instantiateViewController(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 identifier: "Food Detail")'," ",Object(c.jsx)("strong",{className:"code-keyword",children:"as"}),"? DetailViewController"," ","{",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 detailViewController.item = foods[indexPath.row]",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 navigationController?",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 .pushViewController(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 detailViewController, ",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 animated:"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"}),")",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["This function runs the code inside whenever a cell is selected. The if-let statement instantiates our DetailViewController using the"," ",Object(c.jsx)("strong",{className:"blog-bold",children:"Storyboard ID"})," that we set in the Storyboard section. If it passes the if-let statement, the item property that we set in our DetailViewController will be sent to the selected cell. After, the navigationController will push the view to the DetailViewController that we created earlier.",Object(c.jsx)("br",{})]})]})},w=function(){return Object(c.jsxs)(l.a,{title:"View Controller: View Will Appear",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:['In Xcode, type "',Object(c.jsx)("strong",{className:"blog-bold",children:"viewWillAppear"}),'" and select the first suggestion. This function will run whatever is inside every time this view appears. This is needed if there is an update or delete that occurred in the DetailViewController. By calling our getAllItems function, the foods array will be updated and the table view will be reloaded:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:["\xa0",Object(c.jsx)("strong",{className:"code-keyword",children:"override func"})," ","viewWillAppear(_ animated: Bool) ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 getAllItems()",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})})]})},f=function(){return Object(c.jsxs)(l.a,{title:"View Controller: Add Tapped",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:['In this section, we will add functionality to our add button in the Navigation Controller. As stated before, we need to create Objective C functions for those buttons. This sounds intimidating, but has a very simple solution. All we need to do is type "',Object(c.jsx)("strong",{className:"blog-bold",children:"@objc"}),'" before our usual function creation:',Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"@objc func"})," addTapped() ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," alert = UIAlertController(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "New Food", ',Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 message: "Enter new food choice", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 preferredStyle: .alert)",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addTextField(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 configurationHandler:"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"nil"}),Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 )",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addAction(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 UIAlertAction(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 title: "Submit", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 style: .default)","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 [",Object(c.jsx)("strong",{className:"code-keyword",children:"weak self"}),"] ",Object(c.jsx)("strong",{className:"code-keyword",children:"_ in"}),Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"guard let"})," ","field = alert.textFields?.first, ",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0"," ",Object(c.jsx)("strong",{class:"code-keyword",children:"let"})," text = field.text, ",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 !text.isEmpty ",Object(c.jsx)("strong",{class:"code-keyword",children:"else"})," ","{"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"return"})," ","}",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"self"}),"? .createItem( name: text)",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",")",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 present( alert, animated:"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"}),")",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["First, we are creating a UIAlertController object and assigning it to the alert constant. A text field is added to the alert object. A submit button is also created with a handler closure that is similar to the edit button shown earlier. The difference would be that this function is calling the createItem function.",Object(c.jsx)("br",{})]})]})},N=function(){return Object(c.jsxs)(l.a,{title:"View Controller: Play Tapped",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Finally, we have the play functionality:",Object(c.jsx)("br",{})]}),Object(c.jsx)("div",{className:"blog-code",children:Object(c.jsxs)("div",{className:"code",children:[Object(c.jsx)("strong",{className:"code-keyword",children:"@objc func"})," playTapped()"," ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{className:"code-keyword",children:"let"})," alert: UIAlertController",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"if"})," ","foods.count > 0 ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",Object(c.jsx)("strong",{class:"code-keyword",children:"let"})," food = foods",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 .randomElement()?",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 .name",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 alert = UIAlertController(",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 title: food, ",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 message: "Try eating \\(food!)", ',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 preferredStyle: .alert)",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"else"})," ","{",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 alert = UIAlertController(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 title: "Empty",',Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 message: "Please add choices before running",',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 preferredStyle: .alert)",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 ","}",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 alert.addAction(",Object(c.jsx)("br",{}),'\xa0 \xa0 \xa0 \xa0 UIAlertAction( title: "OK", style: .default)',Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 )",Object(c.jsx)("br",{}),"\u200d",Object(c.jsx)("br",{}),"\xa0 \xa0 \xa0 \xa0 present( alert, animated:"," ",Object(c.jsx)("strong",{className:"code-keyword",children:"true"}),")",Object(c.jsx)("br",{}),"\xa0 \xa0 ","}"]})}),Object(c.jsxs)("div",{className:"about-desc blog-content",children:["In this function, we have two possible Alert Controllers. The first type would be if we have choices to choose from and the second would be if there were none. If there are choices, we would choose a random element from the FoodItem array and grab its name. With the name of the FoodItem, we would create an alert saving food pickers. If there are no FoodItems in our array, we would tell the user to add a food choice. An ok button is added to the alert to allow the user to dismiss the alert."," ",Object(c.jsx)("br",{})]})]})},v=function(){return Object(c.jsxs)(l.a,{title:"Demo",children:[Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Complete Demo Code:",Object(c.jsx)("br",{})]}),Object(c.jsx)("a",{href:"https://github.com/MichaelDoctor/FoodPickerDemo",target:"_blank",rel:"noopener noreferrer",className:"blog-link",children:"Food Pickers vs. the World"}),Object(c.jsx)(a.a,{link:"https://www.youtube.com/embed/zsI4A_73ey4"})]})},p=function(){return Object(c.jsx)(l.a,{title:"The End",children:Object(c.jsxs)("div",{className:"about-desc blog-content",children:["Congratulations! You survived the dry sequel to my Swift Blog. Most of the time sequels aren't as entertaining as the original, so this was expected \ud83d\ude05. As you saw, most of the pre-made functions and properties were self-explanatory. Even touchUpInside makes sense once you get over the name. I still have a lot to learn about iOS development but hopefully, I taught you a few things and saved a few Food Pickers with this simple demo.",Object(c.jsx)("br",{})]})})},y=function(){return Object(c.jsxs)("div",{className:"section-desc",children:[Object(c.jsx)(n,{}),Object(c.jsx)(r,{}),Object(c.jsx)(i,{}),Object(c.jsx)(b,{}),Object(c.jsx)(d,{}),Object(c.jsx)(j,{}),Object(c.jsx)(h,{}),Object(c.jsx)(x,{}),Object(c.jsx)(m,{}),Object(c.jsx)(O,{}),Object(c.jsx)(u,{}),Object(c.jsx)(g,{}),Object(c.jsx)(w,{}),Object(c.jsx)(f,{}),Object(c.jsx)(N,{}),Object(c.jsx)(v,{}),Object(c.jsx)(p,{})]})},k=s(104),I=s(72),C=s(71);t.default=function(){return Object(C.a)("https://res.cloudinary.com/hsse18xji/raw/upload/v1606877900/portfolio/js/jquery_xpecxx.js"),Object(C.a)("https://res.cloudinary.com/hsse18xji/raw/upload/v1607053094/portfolio/js/webflow.animation_skydrw.js"),Object(c.jsxs)("div",{className:"container",children:[Object(c.jsx)(I.a,{}),Object(c.jsxs)(k.a,{blog:2,children:[Object(c.jsx)(o.a,{titleMain:"Swift Blog Part 2:",titleSub:"The Demo",author:"Michael Doctor",date:"April 10, 2021"}),Object(c.jsx)(y,{})]})]})}},61:function(e,t,s){"use strict";var c=s(5);s(0);t.a=function(e){var t=e.title,s=e.children;return Object(c.jsxs)("div",{className:"blog-section",children:[Object(c.jsx)("div",{className:"blog-head-wrap",children:Object(c.jsx)("h1",{className:"blog-header",id:t,children:t})}),s]})}},64:function(e,t,s){"use strict";var c=s(5);s(0);t.a=function(e){var t=e.link;return Object(c.jsx)("div",{className:"vid-wrapper",children:Object(c.jsx)("div",{style:{paddingTop:"56.17021276595745%"},className:"blog-vid w-video w-embed",children:Object(c.jsx)("iframe",{className:"embedly-embed",src:t,scrolling:"no",title:"YouTube embed",frameBorder:"0",allow:"autoplay; fullscreen",allowFullScreen:!0})})})}},70:function(e,t,s){"use strict";var c=s(5);s(0);t.a=function(){return Object(c.jsxs)("div",{"data-w-id":"f50d5e09-e817-9552-6d28-c27f47cc01b0",className:"footer opacity-scroll",children:[Object(c.jsx)("div",{className:"hr"}),Object(c.jsxs)("div",{className:"footer-container",id:"footer",children:[Object(c.jsxs)("div",{className:"footer-info",children:[Object(c.jsx)("h5",{className:"footer-header",children:"Michael Doctor's Portfolio"}),Object(c.jsx)("div",{className:"footer-desc",children:"My personal website portfolio was made with React, Django, PostgreSQL, and Webflow."})]}),Object(c.jsxs)("div",{className:"footer-links",children:[Object(c.jsx)("h5",{className:"footer-header",children:"Links"}),Object(c.jsxs)("a",{href:"https://github.com/MichaelDoctor",className:"link",target:"_blank",rel:"noopener noreferrer",children:[Object(c.jsx)("i",{className:"fab fa-github"})," Github"]}),Object(c.jsxs)("a",{href:"https://www.linkedin.com/in/michaeldoctor/",className:"link",target:"_blank",rel:"noopener noreferrer",children:[Object(c.jsx)("i",{className:"fab fa-linkedin"})," LinkedIn"]})]}),Object(c.jsxs)("div",{className:"footer-contact",children:[Object(c.jsx)("h5",{className:"footer-header",children:"Contact Info"}),Object(c.jsx)("h6",{className:"footer-name",children:"Michael Doctor"}),Object(c.jsxs)("div",{className:"text-block-2",children:["Canada",Object(c.jsx)("br",{}),"Calgary, AB"]}),Object(c.jsxs)("a",{href:"#intro",className:"link",children:[Object(c.jsx)("i",{className:"fab fa-google"})," michaeldoctoryyc"]})]})]})]})}},71:function(e,t,s){"use strict";var c=s(0),o=function(e){var t=document.getElementsByClassName("useScript");Array.from(t).forEach((function(t){t.src===e&&document.body.removeChild(t)}))};t.a=function(e){Object(c.useEffect)((function(){o(e);var t=document.createElement("script");return t.type="text/javascript",t.className="useScript",t.src=e,t.defer=!0,document.body.appendChild(t),function(){o(e)}}),[e])}},72:function(e,t,s){"use strict";var c=s(5),o=(s(0),function(e){var t=e.url,s=e.text;return Object(c.jsxs)("a",{href:t,className:"nav-link hover1",children:[s,Object(c.jsx)("br",{})]})}),l=s(11);t.a=function(){return Object(c.jsx)("div",{"data-collapse":"medium","data-animation":"default","data-duration":"400","data-w-id":"2b4fe990-422b-aafa-0844-15043c40d507",role:"banner",className:"navbar w-nav",children:Object(c.jsxs)("div",{className:"container w-container",children:[Object(c.jsx)(l.b,{to:"/",className:"brand hover1 w-nav-brand",children:Object(c.jsxs)("div",{className:"nav-logo",children:[Object(c.jsx)("i",{className:"fas fa-code"})," MICHAEL DOCTOR"]})}),Object(c.jsxs)("nav",{role:"navigation",className:"nav-links w-nav-menu",children:[Object(c.jsx)(o,{url:"/#intro",text:"Home"}),Object(c.jsx)(o,{url:"/#projects",text:"Projects"}),Object(c.jsx)(o,{url:"/#blogs",text:"Blogs"}),Object(c.jsx)(o,{url:"/#about",text:"About Me"}),Object(c.jsx)(o,{url:"/#intro",text:"Contact Me"})]}),Object(c.jsx)("div",{className:"menu-button hover1 w-nav-button",children:Object(c.jsx)("div",{className:"icon w-icon-nav-menu"})})]})})}}}]);
//# sourceMappingURL=6.fc8d9364.chunk.js.map